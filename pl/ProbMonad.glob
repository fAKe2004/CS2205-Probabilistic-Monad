DIGEST 0632cac92ad06d42cd5c1488c647ccab
FPL.ProbMonad
R15:29 Coq.Reals.Reals <> <> lib
R47:65 Coq.micromega.Psatz <> <> lib
R83:105 Coq.Sorting.Permutation <> <> lib
R123:141 SetsClass.SetsClass <> <> lib
R159:179 Coq.Classes.Morphisms <> <> lib
R197:210 Coq.Lists.List <> <> lib
R220:232 Coq.Lists.List ListNotations <> mod
R250:273 Coq.Logic.Classical_Prop <> <> lib
R283:294 SetsClass.SetsClass_AxiomFree SetsNotation <> mod
prf 352:366 <> equiv_in_domain
binder 379:379 <> A:1
binder 381:381 <> B:2
R395:398 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R394:394 PL.ProbMonad <> A:1 var
R399:399 PL.ProbMonad <> B:2 var
binder 391:391 <> f:3
R407:410 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R406:406 PL.ProbMonad <> B:2 var
R412:415 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R411:411 PL.ProbMonad <> B:2 var
binder 403:403 <> R:4
R440:447 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R427:437 Coq.Classes.RelationClasses <> Equivalence class
R439:439 PL.ProbMonad <> R:4 var
R448:458 Coq.Classes.RelationClasses <> Equivalence class
binder 465:466 <> a1:5
binder 468:469 <> a2:6
R474:474 PL.ProbMonad <> R:4 var
R484:484 PL.ProbMonad <> f:3 var
R486:487 PL.ProbMonad <> a2:6 var
R477:477 PL.ProbMonad <> f:3 var
R479:480 PL.ProbMonad <> a1:5 var
R529:537 Coq.Classes.RelationClasses <> Reflexive class
R580:588 Coq.Classes.RelationClasses <> Symmetric class
R635:644 Coq.Classes.RelationClasses <> Transitive class
mod 1004:1008 <> Monad
rec 1018:1022 Monad Monad
proj 1055:1058 Monad bind
proj 1109:1111 Monad ret
R1032:1035 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 1025:1025 <> M:7
binder 1069:1069 <> A:9
binder 1071:1071 <> B:10
R1084:1087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1081:1081 PL.ProbMonad <> M:7 var
R1083:1083 PL.ProbMonad <> A:9 var
R1088:1088 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1097:1101 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1090:1093 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1089:1089 PL.ProbMonad <> A:9 var
R1094:1094 PL.ProbMonad <> M:7 var
R1096:1096 PL.ProbMonad <> B:10 var
R1102:1102 PL.ProbMonad <> M:7 var
R1104:1104 PL.ProbMonad <> B:10 var
binder 1122:1122 <> A:12
R1133:1136 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1132:1132 PL.ProbMonad <> A:12 var
R1137:1137 PL.ProbMonad <> M:7 var
R1139:1139 PL.ProbMonad <> A:12 var
R1150:1154 PL.ProbMonad Monad <> mod
R1165:1169 PL.ProbMonad Monad <> mod
mod 1180:1192 <> MonadNotation
R1290:1293 PL.ProbMonad Monad bind meth
binder 1303:1303 <> x:14
not 1270:1270 MonadNotation ::monad_scope:x_'<-'_x_';;'_x
R1417:1420 PL.ProbMonad Monad bind meth
binder 1430:1430 <> x:15
not 1393:1393 MonadNotation ::monad_scope:x_':'_x_'<-'_x_';;'_x
R1550:1553 PL.ProbMonad Monad bind meth
binder 1563:1563 <> x:16
R1574:1574 PL.ProbMonad <> x:16 var
not 1524:1524 MonadNotation ::monad_scope:''''_x_'<-'_x_';;'_x
R1705:1708 PL.ProbMonad Monad bind meth
R1721:1724 Coq.Init.Datatypes <> unit ind
not 1690:1690 MonadNotation ::monad_scope:x_';;'_x
R1791:1803 PL.ProbMonad MonadNotation <> mod
R1817:1820 PL.ProbMonad <> bind meth
R1846:1848 PL.ProbMonad <> ret meth
R1871:1883 PL.ProbMonad MonadNotation <> mod
mod 2219:2226 <> SetMonad
def 2241:2241 SetMonad M
binder 2244:2244 <> A:18
R2263:2266 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2262:2262 PL.ProbMonad <> A:18 var
def 2285:2288 SetMonad bind
binder 2299:2299 <> A:19
binder 2301:2301 <> B:20
R2314:2314 PL.ProbMonad SetMonad M def
R2316:2316 PL.ProbMonad <> A:19 var
binder 2311:2311 <> f:21
R2324:2327 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2323:2323 PL.ProbMonad <> A:19 var
R2328:2328 PL.ProbMonad SetMonad M def
R2330:2330 PL.ProbMonad <> B:20 var
binder 2320:2320 <> g:22
R2334:2334 PL.ProbMonad SetMonad M def
R2336:2336 PL.ProbMonad <> B:20 var
binder 2348:2348 <> A:23
binder 2350:2350 <> B:24
R2363:2363 PL.ProbMonad SetMonad M def
R2365:2365 PL.ProbMonad <> A:23 var
binder 2360:2360 <> f:25
R2373:2376 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2372:2372 PL.ProbMonad <> A:23 var
R2377:2377 PL.ProbMonad SetMonad M def
R2379:2379 PL.ProbMonad <> B:24 var
binder 2369:2369 <> g:26
R2396:2396 PL.ProbMonad <> B:24 var
binder 2393:2393 <> b:27
R2401:2407 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R2412:2413 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R2411:2411 PL.ProbMonad <> A:23 var
binder 2408:2408 <> a:28
R2421:2424 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R2415:2419 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R2414:2414 PL.ProbMonad <> a:28 var
R2420:2420 PL.ProbMonad <> f:25 var
R2426:2430 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R2425:2425 PL.ProbMonad <> b:27 var
R2431:2431 PL.ProbMonad <> g:26 var
R2433:2433 PL.ProbMonad <> a:28 var
def 2448:2450 SetMonad ret
binder 2461:2461 <> A:29
R2474:2474 PL.ProbMonad <> A:29 var
binder 2471:2471 <> a:30
R2478:2478 PL.ProbMonad SetMonad M def
R2480:2480 PL.ProbMonad <> A:29 var
binder 2492:2492 <> A:31
R2505:2505 PL.ProbMonad <> A:31 var
binder 2502:2502 <> a:32
R2511:2512 Coq.Init.Logic <> eq ind
R2514:2514 PL.ProbMonad <> a:32 var
R2522:2529 PL.ProbMonad SetMonad <> mod
inst 2552:2560 <> set_monad
R2563:2567 PL.ProbMonad <> Monad class
R2569:2578 PL.ProbMonad <> M def
R2588:2591 PL.ProbMonad <> bind meth
R2588:2591 PL.ProbMonad <> bind meth
R2588:2591 PL.ProbMonad <> bind meth
R2613:2615 PL.ProbMonad <> ret meth
R2613:2615 PL.ProbMonad <> ret meth
R2596:2608 PL.ProbMonad <> bind def
R2620:2631 PL.ProbMonad <> ret def
def 2650:2654 <> Hoare
binder 2657:2657 <> A:33
R2670:2679 PL.ProbMonad <> M def
R2681:2681 PL.ProbMonad <> A:33 var
binder 2667:2667 <> c:34
R2689:2692 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2688:2688 PL.ProbMonad <> A:33 var
binder 2685:2685 <> P:35
binder 2717:2717 <> a:36
R2727:2730 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2721:2725 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R2720:2720 PL.ProbMonad <> a:36 var
R2726:2726 PL.ProbMonad <> c:34 var
R2731:2731 PL.ProbMonad <> P:35 var
R2733:2733 PL.ProbMonad <> a:36 var
inst 2756:2774 <> SetMonad_bind_congr
binder 2777:2777 <> A:37
binder 2779:2779 <> B:38
R2791:2796 Coq.Classes.Morphisms <> Proper class
R2847:2850 PL.ProbMonad <> bind meth
R2854:2862 PL.ProbMonad <> set_monad inst
R2864:2864 PL.ProbMonad <> A:37 var
R2866:2866 PL.ProbMonad <> B:38 var
R2809:2813 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R2799:2808 SetsClass.SetsDomain Sets equiv meth
R2824:2828 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R2814:2823 SetsClass.SetsDomain Sets equiv meth
R2829:2838 SetsClass.SetsDomain Sets equiv meth
R2886:2891 Coq.Classes.Morphisms <> Proper class
R2894:2903 Coq.Classes.Morphisms <> respectful def
R2915:2923 PL.ProbMonad <> set_monad inst
R2926:2929 PL.ProbMonad <> bind meth
R2932:2944 PL.ProbMonad <> bind def
inst 3166:3176 <> Hoare_congr
binder 3179:3179 <> A:39
R3191:3196 Coq.Classes.Morphisms <> Proper class
R3228:3232 PL.ProbMonad <> Hoare def
R3234:3234 PL.ProbMonad <> A:39 var
R3209:3213 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3199:3208 SetsClass.SetsDomain Sets equiv meth
R3216:3220 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3214:3215 Coq.Init.Logic <> eq ind
R3221:3223 Coq.Init.Logic <> iff def
R3254:3259 Coq.Classes.Morphisms <> Proper class
R3262:3271 Coq.Classes.Morphisms <> respectful def
R3291:3295 PL.ProbMonad <> Hoare def
def 3737:3739 <> sum
R3745:3748 Coq.Init.Datatypes <> list ind
R3750:3750 Coq.Reals.Rdefinitions RbaseSymbolsImpl R defax
binder 3742:3742 <> l:40
R3754:3754 Coq.Reals.Rdefinitions RbaseSymbolsImpl R defax
R3761:3770 Coq.Lists.List <> fold_right def
R3782:3782 PL.ProbMonad <> l:40 var
R3772:3776 Coq.Reals.Rdefinitions RbaseSymbolsImpl Rplus defax
def 3797:3804 <> sum_prob
binder 3807:3807 <> A:41
R3823:3826 Coq.Init.Datatypes <> list ind
R3828:3828 PL.ProbMonad <> A:41 var
binder 3817:3820 <> pset:42
R3839:3842 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3838:3838 PL.ProbMonad <> A:41 var
R3843:3843 Coq.Reals.Rdefinitions RbaseSymbolsImpl R defax
binder 3832:3835 <> prob:43
R3847:3847 Coq.Reals.Rdefinitions RbaseSymbolsImpl R defax
R3854:3856 PL.ProbMonad <> sum def
R3859:3861 Coq.Lists.List <> map def
R3868:3871 PL.ProbMonad <> pset:42 var
R3863:3866 PL.ProbMonad <> prob:43 var
mod 3883:3891 <> ProbDistr
rec 3902:3906 ProbDistr Distr
proj 3931:3934 ProbDistr prob
proj 3947:3950 ProbDistr pset
binder 3909:3909 <> A:44
R3938:3941 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3937:3937 PL.ProbMonad <> A:44 var
R3942:3942 Coq.Reals.Rdefinitions RbaseSymbolsImpl R defax
R3953:3956 Coq.Init.Datatypes <> list ind
R3958:3958 PL.ProbMonad <> A:44 var
R3975:3978 PL.ProbMonad ProbDistr prob proj
R3975:3978 PL.ProbMonad ProbDistr prob proj
R3997:4000 PL.ProbMonad ProbDistr pset proj
R3997:4000 PL.ProbMonad ProbDistr pset proj
rec 4017:4021 ProbDistr legal
proj 4059:4070 ProbDistr legal_no_dup
proj 4091:4102 ProbDistr legal_nonneg
proj 4138:4153 ProbDistr legal_pset_valid
proj 4205:4216 ProbDistr legal_prob_1
binder 4024:4024 <> A:48
R4037:4041 PL.ProbMonad ProbDistr Distr rec
R4043:4043 PL.ProbMonad <> A:48 var
binder 4034:4034 <> d:49
R4073:4077 Coq.Lists.List <> NoDup ind
R4082:4085 PL.ProbMonad ProbDistr pset proj
R4079:4079 PL.ProbMonad <> d:49 var
binder 4112:4112 <> a:52
R4126:4129 Coq.Reals.Rdefinitions <> ::R_scope:x_'>='_x not
R4119:4122 PL.ProbMonad ProbDistr prob proj
R4116:4116 PL.ProbMonad <> d:49 var
R4125:4125 PL.ProbMonad <> a:52 var
binder 4163:4163 <> a:54
R4184:4187 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4177:4179 Coq.Reals.Rdefinitions <> ::R_scope:x_'>'_x not
R4170:4173 PL.ProbMonad ProbDistr prob proj
R4167:4167 PL.ProbMonad <> d:49 var
R4176:4176 PL.ProbMonad <> a:54 var
R4188:4189 Coq.Lists.List <> In def
R4196:4199 PL.ProbMonad ProbDistr pset proj
R4193:4193 PL.ProbMonad <> d:49 var
R4191:4191 PL.ProbMonad <> a:54 var
R4245:4247 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4219:4226 PL.ProbMonad <> sum_prob def
R4240:4243 PL.ProbMonad ProbDistr prob proj
R4237:4237 PL.ProbMonad <> d:49 var
R4231:4234 PL.ProbMonad ProbDistr pset proj
R4228:4228 PL.ProbMonad <> d:49 var
def 4268:4272 ProbDistr equiv
binder 4275:4275 <> A:57
R4292:4296 PL.ProbMonad ProbDistr Distr rec
R4298:4298 PL.ProbMonad <> A:57 var
binder 4285:4286 <> d1:58
binder 4288:4289 <> d2:59
R4312:4312 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R4351:4357 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R4323:4323 PL.ProbMonad <> A:57 var
binder 4320:4320 <> a:60
R4337:4339 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4330:4333 PL.ProbMonad ProbDistr prob proj
R4326:4327 PL.ProbMonad <> d1:58 var
R4336:4336 PL.ProbMonad <> a:60 var
R4344:4347 PL.ProbMonad ProbDistr prob proj
R4340:4341 PL.ProbMonad <> d2:59 var
R4350:4350 PL.ProbMonad <> a:60 var
R4358:4368 Coq.Sorting.Permutation <> Permutation ind
R4384:4387 PL.ProbMonad ProbDistr pset proj
R4380:4381 PL.ProbMonad <> d2:59 var
R4374:4377 PL.ProbMonad ProbDistr pset proj
R4370:4371 PL.ProbMonad <> d1:58 var
def 4403:4413 ProbDistr imply_event
R4423:4427 PL.ProbMonad ProbDistr Distr rec
binder 4416:4417 <> d1:61
binder 4419:4420 <> d2:62
R4446:4452 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R4484:4489 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R4456:4459 Coq.Init.Datatypes <> list ind
R4471:4473 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R4462:4465 Coq.Init.Datatypes <> list ind
R4474:4477 Coq.Init.Datatypes <> list ind
binder 4453:4453 <> L:63
R4532:4539 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R4490:4500 Coq.Sorting.Permutation <> Permutation ind
R4513:4518 Coq.Lists.List <> concat def
R4521:4523 Coq.Lists.List <> map def
R4529:4529 PL.ProbMonad <> L:63 var
R4525:4527 Coq.Init.Datatypes <> fst def
R4506:4509 PL.ProbMonad ProbDistr pset proj
R4502:4503 PL.ProbMonad <> d1:61 var
R4582:4589 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R4540:4550 Coq.Sorting.Permutation <> Permutation ind
R4563:4568 Coq.Lists.List <> concat def
R4571:4573 Coq.Lists.List <> map def
R4579:4579 PL.ProbMonad <> L:63 var
R4575:4577 Coq.Init.Datatypes <> snd def
R4556:4559 PL.ProbMonad ProbDistr pset proj
R4552:4553 PL.ProbMonad <> d2:62 var
R4590:4590 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R4725:4734 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R4825:4825 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
binder 4598:4599 <> l1:64
binder 4601:4602 <> l2:65
R4625:4635 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4612:4613 Coq.Lists.List <> In def
R4624:4624 PL.ProbMonad <> L:63 var
R4615:4615 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4618:4619 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4622:4622 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4616:4617 PL.ProbMonad <> l1:64 var
R4620:4621 PL.ProbMonad <> l2:65 var
binder 4643:4644 <> P1:66
R4655:4665 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4647:4648 Coq.Lists.List <> In def
R4653:4654 PL.ProbMonad <> l1:64 var
R4650:4651 PL.ProbMonad <> P1:66 var
binder 4673:4674 <> P2:67
R4685:4695 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4677:4678 Coq.Lists.List <> In def
R4683:4684 PL.ProbMonad <> l2:65 var
R4680:4681 PL.ProbMonad <> P2:67 var
R4704:4715 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4724:4724 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4696:4697 Coq.Lists.List <> In def
R4702:4703 PL.ProbMonad <> l2:65 var
R4699:4700 PL.ProbMonad <> P2:67 var
R4718:4721 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4716:4717 PL.ProbMonad <> P1:66 var
R4722:4723 PL.ProbMonad <> P2:67 var
binder 4742:4743 <> l1:68
binder 4745:4746 <> l2:69
R4769:4779 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R4756:4757 Coq.Lists.List <> In def
R4768:4768 PL.ProbMonad <> L:63 var
R4759:4759 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4762:4763 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4766:4766 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4760:4761 PL.ProbMonad <> l1:68 var
R4764:4765 PL.ProbMonad <> l2:69 var
R4801:4803 Coq.Init.Logic <> ::type_scope:x_'='_x not
R4780:4787 PL.ProbMonad <> sum_prob def
R4796:4799 PL.ProbMonad ProbDistr prob proj
R4792:4793 PL.ProbMonad <> d1:61 var
R4789:4790 PL.ProbMonad <> l1:68 var
R4804:4811 PL.ProbMonad <> sum_prob def
R4820:4823 PL.ProbMonad ProbDistr prob proj
R4816:4817 PL.ProbMonad <> d2:62 var
R4813:4814 PL.ProbMonad <> l2:69 var
def 4840:4850 ProbDistr equiv_event
R4860:4864 PL.ProbMonad ProbDistr Distr rec
binder 4853:4854 <> d1:70
binder 4856:4857 <> d2:71
R4883:4889 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R4921:4926 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R4893:4896 Coq.Init.Datatypes <> list ind
R4908:4910 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R4899:4902 Coq.Init.Datatypes <> list ind
R4911:4914 Coq.Init.Datatypes <> list ind
binder 4890:4890 <> L:72
R4969:4976 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R4927:4937 Coq.Sorting.Permutation <> Permutation ind
R4950:4955 Coq.Lists.List <> concat def
R4958:4960 Coq.Lists.List <> map def
R4966:4966 PL.ProbMonad <> L:72 var
R4962:4964 Coq.Init.Datatypes <> fst def
R4943:4946 PL.ProbMonad ProbDistr pset proj
R4939:4940 PL.ProbMonad <> d1:70 var
R5019:5026 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R4977:4987 Coq.Sorting.Permutation <> Permutation ind
R5000:5005 Coq.Lists.List <> concat def
R5008:5010 Coq.Lists.List <> map def
R5016:5016 PL.ProbMonad <> L:72 var
R5012:5014 Coq.Init.Datatypes <> snd def
R4993:4996 PL.ProbMonad ProbDistr pset proj
R4989:4990 PL.ProbMonad <> d2:71 var
R5027:5027 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5163:5172 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5263:5263 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
binder 5035:5036 <> l1:73
binder 5038:5039 <> l2:74
R5062:5072 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5049:5050 Coq.Lists.List <> In def
R5061:5061 PL.ProbMonad <> L:72 var
R5052:5052 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5055:5056 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5059:5059 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5053:5054 PL.ProbMonad <> l1:73 var
R5057:5058 PL.ProbMonad <> l2:74 var
binder 5080:5081 <> P1:75
R5092:5102 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5084:5085 Coq.Lists.List <> In def
R5090:5091 PL.ProbMonad <> l1:73 var
R5087:5088 PL.ProbMonad <> P1:75 var
binder 5110:5111 <> P2:76
R5122:5132 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5114:5115 Coq.Lists.List <> In def
R5120:5121 PL.ProbMonad <> l2:74 var
R5117:5118 PL.ProbMonad <> P2:76 var
R5141:5152 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5162:5162 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5133:5134 Coq.Lists.List <> In def
R5139:5140 PL.ProbMonad <> l2:74 var
R5136:5137 PL.ProbMonad <> P2:76 var
R5155:5159 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R5153:5154 PL.ProbMonad <> P1:75 var
R5160:5161 PL.ProbMonad <> P2:76 var
binder 5180:5181 <> l1:77
binder 5183:5184 <> l2:78
R5207:5217 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5194:5195 Coq.Lists.List <> In def
R5206:5206 PL.ProbMonad <> L:72 var
R5197:5197 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5200:5201 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5204:5204 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5198:5199 PL.ProbMonad <> l1:77 var
R5202:5203 PL.ProbMonad <> l2:78 var
R5239:5241 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5218:5225 PL.ProbMonad <> sum_prob def
R5234:5237 PL.ProbMonad ProbDistr prob proj
R5230:5231 PL.ProbMonad <> d1:70 var
R5227:5228 PL.ProbMonad <> l1:77 var
R5242:5249 PL.ProbMonad <> sum_prob def
R5258:5261 PL.ProbMonad ProbDistr prob proj
R5254:5255 PL.ProbMonad <> d2:71 var
R5251:5252 PL.ProbMonad <> l2:78 var
def 5278:5283 ProbDistr is_det
binder 5286:5286 <> A:79
R5299:5299 PL.ProbMonad <> A:79 var
binder 5296:5296 <> a:80
R5306:5310 PL.ProbMonad ProbDistr Distr rec
R5312:5312 PL.ProbMonad <> A:79 var
binder 5303:5303 <> d:81
R5340:5343 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5334:5336 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5329:5332 PL.ProbMonad ProbDistr pset proj
R5326:5326 PL.ProbMonad <> d:81 var
R5337:5337 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R5339:5339 Coq.Lists.List ListNotations ::list_scope:'['_x_']' not
R5338:5338 PL.ProbMonad <> a:80 var
R5360:5365 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5354:5356 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5347:5350 PL.ProbMonad ProbDistr prob proj
R5344:5344 PL.ProbMonad <> d:81 var
R5353:5353 PL.ProbMonad <> a:80 var
binder 5373:5373 <> b:82
R5376:5376 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5383:5387 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5378:5381 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R5377:5377 PL.ProbMonad <> a:80 var
R5382:5382 PL.ProbMonad <> b:82 var
R5398:5400 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5391:5394 PL.ProbMonad ProbDistr prob proj
R5388:5388 PL.ProbMonad <> d:81 var
R5397:5397 PL.ProbMonad <> b:82 var
rec 5502:5510 ProbDistr sum_distr
proj 5608:5621 ProbDistr sum_pset_valid
proj 5723:5736 ProbDistr sum_prob_valid
binder 5513:5513 <> A:83
R5544:5547 Coq.Init.Datatypes <> list ind
R5551:5553 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R5550:5550 Coq.Reals.Rdefinitions RbaseSymbolsImpl R defax
R5554:5558 PL.ProbMonad ProbDistr Distr rec
R5560:5560 PL.ProbMonad <> A:83 var
binder 5540:5541 <> ds:84
R5586:5590 PL.ProbMonad ProbDistr Distr rec
R5592:5592 PL.ProbMonad <> A:83 var
binder 5582:5583 <> d0:85
binder 5635:5635 <> a:87
R5652:5670 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R5638:5639 Coq.Lists.List <> In def
R5647:5650 PL.ProbMonad ProbDistr pset proj
R5643:5644 PL.ProbMonad <> d0:85 var
R5641:5641 PL.ProbMonad <> a:87 var
R5671:5672 Coq.Lists.List <> In def
R5677:5682 Coq.Lists.List <> concat def
R5685:5687 Coq.Lists.List <> map def
R5715:5716 PL.ProbMonad <> ds:84 var
R5695:5695 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5697:5698 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5700:5700 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 5699:5699 <> d:88
binder 5696:5696 <> r:89
binder 5695:5700 <> pat:90
R5708:5711 PL.ProbMonad ProbDistr pset proj
R5705:5705 PL.ProbMonad <> d:88 var
R5674:5674 PL.ProbMonad <> a:87 var
binder 5750:5750 <> a:92
R5764:5780 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5757:5760 PL.ProbMonad ProbDistr prob proj
R5753:5754 PL.ProbMonad <> d0:85 var
R5763:5763 PL.ProbMonad <> a:92 var
R5781:5783 PL.ProbMonad <> sum def
R5786:5788 Coq.Lists.List <> map def
R5822:5823 PL.ProbMonad <> ds:84 var
R5796:5796 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5798:5799 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5801:5801 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 5800:5800 <> d:93
binder 5797:5797 <> r:94
binder 5796:5801 <> pat:95
R5807:5809 Coq.Reals.Rdefinitions <> ::R_scope:x_'*'_x not
R5806:5806 PL.ProbMonad <> r:94 var
R5813:5816 PL.ProbMonad ProbDistr prob proj
R5810:5810 PL.ProbMonad <> d:93 var
R5819:5819 PL.ProbMonad <> a:92 var
def 5844:5853 ProbDistr compute_pr
R5859:5863 PL.ProbMonad ProbDistr Distr rec
binder 5856:5856 <> d:97
R5875:5875 Coq.Reals.Rdefinitions RbaseSymbolsImpl R defax
binder 5872:5872 <> r:98
R5889:5896 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R5909:5915 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R5900:5903 Coq.Init.Datatypes <> list ind
binder 5897:5897 <> l:99
R5916:5916 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5956:5964 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
binder 5924:5924 <> P:100
R5933:5937 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R5927:5928 Coq.Lists.List <> In def
R5932:5932 PL.ProbMonad <> l:99 var
R5930:5930 PL.ProbMonad <> P:100 var
R5951:5954 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5938:5939 Coq.Lists.List <> In def
R5946:5949 PL.ProbMonad ProbDistr pset proj
R5943:5943 PL.ProbMonad <> d:97 var
R5941:5941 PL.ProbMonad <> P:100 var
R5955:5955 PL.ProbMonad <> P:100 var
R5984:5986 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5965:5972 PL.ProbMonad <> sum_prob def
R5979:5982 PL.ProbMonad ProbDistr prob proj
R5976:5976 PL.ProbMonad <> d:97 var
R5974:5974 PL.ProbMonad <> l:99 var
R5987:5987 PL.ProbMonad <> r:98 var
R5995:6003 PL.ProbMonad ProbDistr <> mod
R6030:6044 PL.ProbMonad <> Distr rec
not 6016:6016 <> :::'Distr'
R6088:6101 PL.ProbMonad <> pset proj
not 6070:6070 <> :::x_'.(pset)'
R6147:6160 PL.ProbMonad <> prob proj
not 6129:6129 <> :::x_'.(prob)'
R6214:6235 PL.ProbMonad <> legal_no_dup proj
not 6188:6188 <> :::x_'.(legal_no_dup)'
R6291:6312 PL.ProbMonad <> legal_nonneg proj
not 6265:6265 <> :::x_'.(legal_nonneg)'
R6372:6397 PL.ProbMonad <> legal_pset_valid proj
not 6342:6342 <> :::x_'.(legal_pset_valid)'
R6453:6474 PL.ProbMonad <> legal_prob_1 proj
not 6427:6427 <> :::x_'.(legal_prob_1)'
prf 6504:6530 <> ProbDistr_compute_pr_exists
binder 6540:6540 <> d:101
R6543:6549 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R6551:6554 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 6550:6550 <> r:102
R6555:6574 PL.ProbMonad <> compute_pr def
R6576:6576 PL.ProbMonad <> d:101 var
R6578:6578 PL.ProbMonad <> r:102 var
inst 6633:6658 <> ProbDistr_imply_event_refl
R6663:6671 Coq.Classes.RelationClasses <> Reflexive class
R6673:6693 PL.ProbMonad <> imply_event def
prf 6730:6762 <> ProbDistr_imply_event_refl_setoid
binder 6774:6775 <> d1:103
binder 6777:6778 <> d2:104
R6808:6811 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6781:6801 PL.ProbMonad <> equiv_event def
R6803:6804 PL.ProbMonad <> d1:103 var
R6806:6807 PL.ProbMonad <> d2:104 var
R6812:6832 PL.ProbMonad <> imply_event def
R6834:6835 PL.ProbMonad <> d1:103 var
R6837:6838 PL.ProbMonad <> d2:104 var
inst 6886:6906 <> ProbDistr_equiv_equiv
binder 6909:6909 <> A:105
R6921:6931 Coq.Classes.RelationClasses <> Equivalence class
R6935:6949 PL.ProbMonad <> equiv def
R6951:6951 PL.ProbMonad <> A:105 var
inst 7007:7033 <> ProbDistr_imply_event_trans
R7038:7047 Coq.Classes.RelationClasses <> Transitive class
R7049:7069 PL.ProbMonad <> imply_event def
inst 7117:7143 <> ProbDistr_equiv_event_equiv
R7148:7158 Coq.Classes.RelationClasses <> Equivalence class
R7160:7180 PL.ProbMonad <> equiv_event def
inst 7228:7254 <> ProbDistr_imply_event_congr
R7259:7264 Coq.Classes.Morphisms <> Proper class
R7334:7354 PL.ProbMonad <> imply_event def
R7288:7302 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7267:7287 PL.ProbMonad <> equiv_event def
R7324:7328 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7303:7323 PL.ProbMonad <> equiv_event def
R7329:7331 Coq.Init.Logic <> iff def
inst 7402:7427 <> ProbDistr_compute_pr_congr
R7432:7437 Coq.Classes.Morphisms <> Proper class
R7478:7497 PL.ProbMonad <> compute_pr def
R7461:7465 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7440:7460 PL.ProbMonad <> equiv_event def
R7466:7475 SetsClass.SetsDomain Sets equiv meth
prf 7534:7558 <> ProbDistr_compute_pr_mono
binder 7570:7571 <> f1:106
binder 7573:7574 <> f2:107
binder 7576:7577 <> r1:108
binder 7579:7580 <> r2:109
R7613:7620 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7587:7606 PL.ProbMonad <> compute_pr def
R7608:7609 PL.ProbMonad <> f1:106 var
R7611:7612 PL.ProbMonad <> r1:108 var
R7647:7654 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7621:7640 PL.ProbMonad <> compute_pr def
R7642:7643 PL.ProbMonad <> f2:107 var
R7645:7646 PL.ProbMonad <> r2:109 var
R7682:7689 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7655:7675 PL.ProbMonad <> imply_event def
R7677:7678 PL.ProbMonad <> f1:106 var
R7680:7681 PL.ProbMonad <> f2:107 var
R7693:7696 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x not
R7691:7692 PL.ProbMonad <> r1:108 var
R7697:7698 PL.ProbMonad <> r2:109 var
mod 8038:8046 <> ProbMonad
rec 8057:8061 ProbMonad Legal
proj 8107:8118 ProbMonad Legal_exists
proj 8142:8152 ProbMonad Legal_legal
proj 8197:8208 ProbMonad Legal_unique
binder 8064:8064 <> A:110
R8084:8087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8077:8083 PL.ProbMonad <> :::'Distr' not
R8083:8083 PL.ProbMonad <> A:110 var
binder 8074:8074 <> f:111
R8121:8127 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R8129:8130 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 8128:8128 <> d:113
R8132:8136 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R8131:8131 PL.ProbMonad <> d:113 var
R8137:8137 PL.ProbMonad <> f:111 var
binder 8162:8162 <> d:115
R8172:8175 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8166:8170 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R8165:8165 PL.ProbMonad <> d:115 var
R8171:8171 PL.ProbMonad <> f:111 var
R8176:8190 PL.ProbMonad ProbDistr legal rec
R8192:8192 PL.ProbMonad <> d:115 var
binder 8218:8219 <> d1:117
binder 8221:8222 <> d2:118
R8233:8236 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8227:8231 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R8225:8226 PL.ProbMonad <> d1:117 var
R8232:8232 PL.ProbMonad <> f:111 var
R8245:8248 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8239:8243 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R8237:8238 PL.ProbMonad <> d2:118 var
R8244:8244 PL.ProbMonad <> f:111 var
R8249:8263 PL.ProbMonad ProbDistr equiv def
R8268:8269 PL.ProbMonad <> d2:118 var
R8265:8266 PL.ProbMonad <> d1:117 var
rec 8283:8283 ProbMonad M
proj 8308:8312 ProbMonad distr
proj 8334:8338 ProbMonad legal
binder 8286:8286 <> A:120
R8322:8325 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8315:8321 PL.ProbMonad <> :::'Distr' not
R8321:8321 PL.ProbMonad <> A:120 var
R8341:8345 PL.ProbMonad ProbMonad Legal rec
R8347:8351 PL.ProbMonad <> distr:122 meth
R8368:8372 PL.ProbMonad ProbMonad distr proj
R8368:8372 PL.ProbMonad ProbMonad distr proj
R8391:8395 PL.ProbMonad ProbMonad legal proj
R8391:8395 PL.ProbMonad ProbMonad legal proj
def 8416:8420 ProbMonad __ret
binder 8423:8423 <> A:124
R8436:8436 PL.ProbMonad <> A:124 var
binder 8433:8433 <> a:125
R8448:8451 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8441:8447 PL.ProbMonad <> :::'Distr' not
R8447:8447 PL.ProbMonad <> A:124 var
R8462:8477 PL.ProbMonad ProbDistr is_det def
R8479:8479 PL.ProbMonad <> a:125 var
prf 8489:8499 ProbMonad __ret_Legal
binder 8502:8502 <> A:126
R8522:8522 PL.ProbMonad <> A:126 var
binder 8519:8519 <> a:127
R8525:8529 PL.ProbMonad ProbMonad Legal rec
R8532:8536 PL.ProbMonad ProbMonad __ret def
R8538:8538 PL.ProbMonad <> a:127 var
def 8564:8566 ProbMonad ret
binder 8569:8569 <> A:128
R8582:8582 PL.ProbMonad <> A:128 var
binder 8579:8579 <> a:129
R8587:8587 PL.ProbMonad ProbMonad M rec
R8589:8589 PL.ProbMonad <> A:128 var
R8603:8607 PL.ProbMonad ProbMonad distr proj
R8603:8607 PL.ProbMonad ProbMonad distr proj
R8603:8607 PL.ProbMonad ProbMonad distr proj
R8625:8629 PL.ProbMonad ProbMonad legal proj
R8625:8629 PL.ProbMonad ProbMonad legal proj
R8612:8616 PL.ProbMonad ProbMonad __ret def
R8618:8618 PL.ProbMonad <> a:129 var
R8634:8644 PL.ProbMonad ProbMonad __ret_Legal prfax
R8646:8646 PL.ProbMonad <> a:129 var
def 8667:8672 ProbMonad __bind
binder 8675:8675 <> A:130
binder 8677:8677 <> B:131
R8715:8718 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8708:8714 PL.ProbMonad <> :::'Distr' not
R8714:8714 PL.ProbMonad <> A:130 var
binder 8705:8705 <> f:132
R8748:8751 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8747:8747 PL.ProbMonad <> A:130 var
R8759:8762 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8752:8758 PL.ProbMonad <> :::'Distr' not
R8758:8758 PL.ProbMonad <> B:131 var
binder 8744:8744 <> g:133
R8792:8798 PL.ProbMonad <> :::'Distr' not
R8798:8798 PL.ProbMonad <> B:131 var
binder 8788:8789 <> s2:134
R8812:8819 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R8834:8839 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R8824:8830 PL.ProbMonad <> :::'Distr' not
R8830:8830 PL.ProbMonad <> A:130 var
binder 8820:8821 <> s1:135
binder 8833:8833 <> l:136
R8848:8855 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8842:8846 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R8840:8841 PL.ProbMonad <> s1:135 var
R8847:8847 PL.ProbMonad <> f:132 var
R8944:8951 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8856:8862 Coq.Lists.List <> Forall2 ind
R8943:8943 PL.ProbMonad <> l:136 var
R8935:8941 PL.ProbMonad <> :::x_'.(pset)' not
R8933:8934 PL.ProbMonad <> s1:135 var
binder 8875:8875 <> a:137
R8878:8878 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8880:8881 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8883:8883 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 8882:8882 <> d:138
binder 8879:8879 <> r:139
binder 8878:8883 <> pat:140
R8912:8915 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8898:8900 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8897:8897 PL.ProbMonad <> r:139 var
R8903:8911 PL.ProbMonad <> :::x_'.(prob)' not
R8901:8902 PL.ProbMonad <> s1:135 var
R8911:8911 PL.ProbMonad <> a:137 var
R8917:8921 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R8916:8916 PL.ProbMonad <> d:138 var
R8922:8922 PL.ProbMonad <> g:133 var
R8924:8924 PL.ProbMonad <> a:137 var
R8952:8970 PL.ProbMonad ProbDistr sum_distr rec
R8974:8975 PL.ProbMonad <> s2:134 var
R8972:8972 PL.ProbMonad <> l:136 var
prf 8985:8996 ProbMonad __bind_legal
binder 8999:8999 <> A:141
binder 9001:9001 <> B:142
R9031:9034 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9024:9030 PL.ProbMonad <> :::'Distr' not
R9030:9030 PL.ProbMonad <> A:141 var
binder 9021:9021 <> f:143
R9046:9049 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9045:9045 PL.ProbMonad <> A:141 var
R9057:9060 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9050:9056 PL.ProbMonad <> :::'Distr' not
R9056:9056 PL.ProbMonad <> B:142 var
binder 9042:9042 <> g:144
R9079:9086 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9072:9076 PL.ProbMonad ProbMonad Legal rec
R9078:9078 PL.ProbMonad <> f:143 var
R9087:9087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9109:9117 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 9095:9095 <> a:145
R9098:9102 PL.ProbMonad ProbMonad Legal rec
R9105:9105 PL.ProbMonad <> g:144 var
R9107:9107 PL.ProbMonad <> a:145 var
R9118:9122 PL.ProbMonad ProbMonad Legal rec
R9125:9130 PL.ProbMonad ProbMonad __bind def
R9134:9134 PL.ProbMonad <> g:144 var
R9132:9132 PL.ProbMonad <> f:143 var
def 9160:9163 ProbMonad bind
binder 9166:9166 <> A:146
binder 9168:9168 <> B:147
R9181:9181 PL.ProbMonad ProbMonad M rec
R9183:9183 PL.ProbMonad <> A:146 var
binder 9178:9178 <> f:148
R9191:9194 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9190:9190 PL.ProbMonad <> A:146 var
R9195:9195 PL.ProbMonad ProbMonad M rec
R9197:9197 PL.ProbMonad <> B:147 var
binder 9187:9187 <> g:149
R9201:9201 PL.ProbMonad ProbMonad M rec
R9203:9203 PL.ProbMonad <> B:147 var
R9217:9221 PL.ProbMonad ProbMonad distr proj
R9217:9221 PL.ProbMonad ProbMonad distr proj
R9217:9221 PL.ProbMonad ProbMonad distr proj
R9273:9277 PL.ProbMonad ProbMonad legal proj
R9273:9277 PL.ProbMonad ProbMonad legal proj
R9226:9231 PL.ProbMonad ProbMonad __bind def
binder 9248:9248 <> a:150
R9260:9264 PL.ProbMonad ProbMonad distr proj
R9254:9254 PL.ProbMonad <> g:149 var
R9256:9256 PL.ProbMonad <> a:150 var
R9236:9240 PL.ProbMonad ProbMonad distr proj
R9233:9233 PL.ProbMonad <> f:148 var
R9282:9293 PL.ProbMonad ProbMonad __bind_legal prfax
binder 9314:9314 <> a:151
R9326:9330 PL.ProbMonad ProbMonad legal proj
R9320:9320 PL.ProbMonad <> g:149 var
R9322:9322 PL.ProbMonad <> a:151 var
R9302:9306 PL.ProbMonad ProbMonad legal proj
R9299:9299 PL.ProbMonad <> f:148 var
def 9353:9362 ProbMonad compute_pr
R9368:9368 PL.ProbMonad ProbMonad M rec
binder 9365:9365 <> f:152
R9377:9386 PL.ProbMonad SetMonad M def
R9388:9388 Coq.Reals.Rdefinitions RbaseSymbolsImpl R defax
binder 9399:9399 <> r:153
R9404:9411 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R9425:9427 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R9415:9424 PL.ProbMonad <> :::'Distr' not
binder 9412:9412 <> d:154
R9443:9446 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9429:9433 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R9428:9428 PL.ProbMonad <> d:154 var
R9437:9441 PL.ProbMonad ProbMonad distr proj
R9434:9434 PL.ProbMonad <> f:152 var
R9447:9466 PL.ProbMonad ProbDistr compute_pr def
R9468:9468 PL.ProbMonad <> d:154 var
R9470:9470 PL.ProbMonad <> r:153 var
def 9485:9495 ProbMonad imply_event
R9505:9505 PL.ProbMonad ProbMonad M rec
binder 9498:9499 <> f1:155
binder 9501:9502 <> f2:156
R9524:9530 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R9536:9541 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 9531:9532 <> d1:157
binder 9534:9535 <> d2:158
R9559:9562 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9544:9548 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R9542:9543 PL.ProbMonad <> d1:157 var
R9553:9557 PL.ProbMonad ProbMonad distr proj
R9549:9550 PL.ProbMonad <> f1:155 var
R9580:9583 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9565:9569 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R9563:9564 PL.ProbMonad <> d2:158 var
R9574:9578 PL.ProbMonad ProbMonad distr proj
R9570:9571 PL.ProbMonad <> f2:156 var
R9584:9604 PL.ProbMonad ProbDistr imply_event def
R9606:9607 PL.ProbMonad <> d1:157 var
R9609:9610 PL.ProbMonad <> d2:158 var
def 9625:9629 ProbMonad equiv
binder 9632:9632 <> A:159
R9649:9649 PL.ProbMonad ProbMonad M rec
R9651:9651 PL.ProbMonad <> A:159 var
binder 9642:9643 <> f1:160
binder 9645:9646 <> f2:161
R9675:9678 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R9669:9673 PL.ProbMonad ProbMonad distr proj
R9665:9666 PL.ProbMonad <> f1:160 var
R9683:9687 PL.ProbMonad ProbMonad distr proj
R9679:9680 PL.ProbMonad <> f2:161 var
def 9703:9713 ProbMonad equiv_event
R9723:9723 PL.ProbMonad ProbMonad M rec
binder 9716:9717 <> f1:162
binder 9719:9720 <> f2:163
R9742:9748 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R9754:9759 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 9749:9750 <> d1:164
binder 9752:9753 <> d2:165
R9777:9780 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9762:9766 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R9760:9761 PL.ProbMonad <> d1:164 var
R9771:9775 PL.ProbMonad ProbMonad distr proj
R9767:9768 PL.ProbMonad <> f1:162 var
R9798:9801 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R9783:9787 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R9781:9782 PL.ProbMonad <> d2:165 var
R9792:9796 PL.ProbMonad ProbMonad distr proj
R9788:9789 PL.ProbMonad <> f2:163 var
R9802:9822 PL.ProbMonad ProbDistr equiv_event def
R9824:9825 PL.ProbMonad <> d1:164 var
R9827:9828 PL.ProbMonad <> d2:165 var
R9836:9844 PL.ProbMonad ProbMonad <> mod
inst 9867:9875 <> ProbMonad
R9878:9882 PL.ProbMonad <> Monad class
R9884:9894 PL.ProbMonad <> M rec
R9904:9907 PL.ProbMonad <> bind meth
R9904:9907 PL.ProbMonad <> bind meth
R9904:9907 PL.ProbMonad <> bind meth
R9931:9933 PL.ProbMonad <> ret meth
R9931:9933 PL.ProbMonad <> ret meth
R9913:9926 PL.ProbMonad <> bind def
R9939:9951 PL.ProbMonad <> ret def
R9981:9995 PL.ProbMonad <> equiv def
not 9968:9968 <> ::monad_scope:x_'=='_x
R10039:10059 PL.ProbMonad <> equiv_event def
not 10025:10025 <> ::monad_scope:x_'==='_x
R10122:10136 PL.ProbMonad <> distr proj
not 10103:10103 <> :::x_'.(distr)'
R10183:10197 PL.ProbMonad <> legal proj
not 10164:10164 <> :::x_'.(legal)'
R10251:10272 PL.ProbMonad <> Legal_exists proj
not 10225:10225 <> :::x_'.(Legal_exists)'
R10327:10347 PL.ProbMonad <> Legal_legal proj
not 10302:10302 <> :::x_'.(Legal_legal)'
R10403:10424 PL.ProbMonad <> Legal_unique proj
not 10377:10377 <> :::x_'.(Legal_unique)'
def 10457:10462 <> Always
binder 10465:10465 <> A:166
R10478:10488 PL.ProbMonad <> M rec
R10490:10490 PL.ProbMonad <> A:166 var
binder 10475:10475 <> c:167
R10498:10501 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10497:10497 PL.ProbMonad <> A:166 var
binder 10494:10494 <> P:168
R10519:10523 PL.ProbMonad <> Hoare def
binder 10578:10579 <> pr:169
R10586:10588 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10584:10585 PL.ProbMonad <> pr:169 var
R10526:10545 PL.ProbMonad <> compute_pr def
R10551:10554 PL.ProbMonad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R10556:10558 PL.ProbMonad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R10555:10555 PL.ProbMonad <> c:167 var
binder 10548:10550 <> res:170
R10559:10561 PL.ProbMonad <> ret meth
R10564:10564 PL.ProbMonad <> P:168 var
R10566:10568 PL.ProbMonad <> res:170 var
prf 10604:10616 <> Always_conseq
binder 10627:10627 <> A:171
R10643:10646 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10642:10642 PL.ProbMonad <> A:171 var
binder 10637:10637 <> P:172
binder 10639:10639 <> Q:173
R10656:10656 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10677:10684 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10719:10719 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 10664:10664 <> a:174
R10670:10673 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10667:10667 PL.ProbMonad <> P:172 var
R10669:10669 PL.ProbMonad <> a:174 var
R10674:10674 PL.ProbMonad <> Q:173 var
R10676:10676 PL.ProbMonad <> a:174 var
binder 10692:10692 <> c:175
R10705:10708 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10695:10700 PL.ProbMonad <> Always def
R10704:10704 PL.ProbMonad <> P:172 var
R10702:10702 PL.ProbMonad <> c:175 var
R10709:10714 PL.ProbMonad <> Always def
R10718:10718 PL.ProbMonad <> Q:173 var
R10716:10716 PL.ProbMonad <> c:175 var
prf 10756:10770 <> Always_bind_ret
binder 10773:10773 <> A:176
binder 10775:10775 <> B:177
R10800:10803 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10799:10799 PL.ProbMonad <> A:176 var
R10804:10814 PL.ProbMonad <> M rec
R10816:10816 PL.ProbMonad <> B:177 var
binder 10795:10796 <> c2:178
R10833:10836 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10832:10832 PL.ProbMonad <> A:176 var
R10837:10837 PL.ProbMonad <> B:177 var
binder 10829:10829 <> f:179
R10854:10857 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10853:10853 PL.ProbMonad <> B:177 var
binder 10850:10850 <> P:180
R10869:10869 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10896:10905 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10975:10975 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 10877:10877 <> a:181
R10884:10886 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10880:10881 PL.ProbMonad <> c2:178 var
R10883:10883 PL.ProbMonad <> a:181 var
R10887:10889 PL.ProbMonad <> ret meth
R10892:10892 PL.ProbMonad <> f:179 var
R10894:10894 PL.ProbMonad <> a:181 var
binder 10913:10914 <> c1:182
R10945:10949 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R10917:10922 PL.ProbMonad <> Always def
binder 10932:10932 <> a:183
R10937:10937 PL.ProbMonad <> P:180 var
R10940:10940 PL.ProbMonad <> f:179 var
R10942:10942 PL.ProbMonad <> a:183 var
R10924:10925 PL.ProbMonad <> c1:182 var
R10950:10955 PL.ProbMonad <> Always def
R10974:10974 PL.ProbMonad <> P:180 var
R10959:10962 PL.ProbMonad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R10965:10967 PL.ProbMonad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R10963:10964 PL.ProbMonad <> c1:182 var
binder 10958:10958 <> a:184
R10968:10969 PL.ProbMonad <> c2:178 var
R10971:10971 PL.ProbMonad <> a:184 var
prf 11019:11035 <> compute_pr_exists
binder 11045:11045 <> f:185
R11048:11054 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R11056:11057 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 11055:11055 <> r:186
R11058:11077 PL.ProbMonad <> compute_pr def
R11079:11079 PL.ProbMonad <> f:185 var
R11081:11081 PL.ProbMonad <> r:186 var
R11110:11129 PL.ProbMonad <> compute_pr def
R11154:11168 PL.ProbMonad <> :::x_'.(Legal_exists)' not
R11146:11153 PL.ProbMonad <> :::x_'.(legal)' not
R11154:11168 PL.ProbMonad <> :::x_'.(Legal_exists)' not
R11146:11153 PL.ProbMonad <> :::x_'.(legal)' not
R11193:11219 PL.ProbMonad <> ProbDistr_compute_pr_exists prfax
R11193:11219 PL.ProbMonad <> ProbDistr_compute_pr_exists prfax
inst 11282:11307 <> ProbMonad_imply_event_refl
R11312:11320 Coq.Classes.RelationClasses <> Reflexive class
R11322:11342 PL.ProbMonad <> imply_event def
prf 11379:11411 <> ProbMonad_imply_event_refl_setoid
binder 11423:11424 <> d1:187
binder 11426:11427 <> d2:188
R11457:11460 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11430:11450 PL.ProbMonad <> equiv_event def
R11452:11453 PL.ProbMonad <> d1:187 var
R11455:11456 PL.ProbMonad <> d2:188 var
R11461:11481 PL.ProbMonad <> imply_event def
R11483:11484 PL.ProbMonad <> d1:187 var
R11486:11487 PL.ProbMonad <> d2:188 var
inst 11535:11555 <> ProbMonad_equiv_equiv
binder 11558:11558 <> A:189
R11570:11580 Coq.Classes.RelationClasses <> Equivalence class
R11584:11598 PL.ProbMonad <> equiv def
R11600:11600 PL.ProbMonad <> A:189 var
R11620:11634 PL.ProbMonad <> equiv def
R11645:11659 PL.ProbMonad <> equiv_in_domain thm
R11645:11659 PL.ProbMonad <> equiv_in_domain thm
R11670:11685 SetsClass.SetsDomain <> Sets_equiv_equiv inst
R11670:11685 SetsClass.SetsDomain <> Sets_equiv_equiv inst
inst 11713:11739 <> ProbMonad_imply_event_trans
R11744:11753 Coq.Classes.RelationClasses <> Transitive class
R11755:11775 PL.ProbMonad <> imply_event def
inst 11823:11849 <> ProbMonad_equiv_event_equiv
R11854:11864 Coq.Classes.RelationClasses <> Equivalence class
R11866:11886 PL.ProbMonad <> equiv_event def
inst 11934:11960 <> ProbMonad_imply_event_congr
R11965:11970 Coq.Classes.Morphisms <> Proper class
R12040:12060 PL.ProbMonad <> imply_event def
R11994:12008 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R11973:11993 PL.ProbMonad <> equiv_event def
R12030:12034 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R12009:12029 PL.ProbMonad <> equiv_event def
R12035:12037 Coq.Init.Logic <> iff def
inst 12108:12123 <> compute_pr_congr
R12128:12133 Coq.Classes.Morphisms <> Proper class
R12174:12193 PL.ProbMonad <> compute_pr def
R12157:12161 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R12136:12156 PL.ProbMonad <> equiv_event def
R12162:12171 SetsClass.SetsDomain Sets equiv meth
prf 12230:12244 <> compute_pr_mono
binder 12256:12257 <> f1:190
binder 12259:12260 <> f2:191
binder 12262:12263 <> r1:192
binder 12265:12266 <> r2:193
R12299:12306 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12273:12292 PL.ProbMonad <> compute_pr def
R12294:12295 PL.ProbMonad <> f1:190 var
R12297:12298 PL.ProbMonad <> r1:192 var
R12333:12340 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12307:12326 PL.ProbMonad <> compute_pr def
R12328:12329 PL.ProbMonad <> f2:191 var
R12331:12332 PL.ProbMonad <> r2:193 var
R12368:12375 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12341:12361 PL.ProbMonad <> imply_event def
R12363:12364 PL.ProbMonad <> f1:190 var
R12366:12367 PL.ProbMonad <> f2:191 var
R12379:12382 Coq.Reals.Rdefinitions <> ::R_scope:x_'<='_x not
R12377:12378 PL.ProbMonad <> r1:192 var
R12383:12384 PL.ProbMonad <> r2:193 var
inst 12420:12439 <> ProbMonad_bind_congr
binder 12442:12442 <> A:194
binder 12444:12444 <> B:195
R12456:12461 Coq.Classes.Morphisms <> Proper class
R12568:12571 PL.ProbMonad <> bind meth
R12575:12583 PL.ProbMonad <> ProbMonad inst
R12585:12585 PL.ProbMonad <> A:194 var
R12587:12587 PL.ProbMonad <> B:195 var
R12479:12493 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R12464:12478 PL.ProbMonad <> equiv def
R12530:12544 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R12494:12511 Coq.Classes.Morphisms <> pointwise_relation def
R12515:12529 PL.ProbMonad <> equiv def
R12545:12559 PL.ProbMonad <> equiv def
inst 12636:12660 <> ProbMonad_bind_mono_event
binder 12663:12663 <> A:196
R12675:12680 Coq.Classes.Morphisms <> Proper class
R12799:12802 PL.ProbMonad <> bind meth
R12806:12814 PL.ProbMonad <> ProbMonad inst
R12816:12816 PL.ProbMonad <> A:196 var
R12698:12712 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R12683:12697 PL.ProbMonad <> equiv def
R12755:12769 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R12713:12730 Coq.Classes.Morphisms <> pointwise_relation def
R12734:12754 PL.ProbMonad <> imply_event def
R12770:12790 PL.ProbMonad <> imply_event def
inst 12870:12895 <> ProbMonad_bind_congr_event
binder 12898:12898 <> A:197
R12910:12915 Coq.Classes.Morphisms <> Proper class
R13034:13037 PL.ProbMonad <> bind meth
R13041:13049 PL.ProbMonad <> ProbMonad inst
R13051:13051 PL.ProbMonad <> A:197 var
R12933:12947 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R12918:12932 PL.ProbMonad <> equiv def
R12990:13004 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R12948:12965 Coq.Classes.Morphisms <> pointwise_relation def
R12969:12989 PL.ProbMonad <> equiv_event def
R13005:13025 PL.ProbMonad <> equiv_event def
inst 13105:13128 <> ProbMonad_ret_mono_event
R13133:13138 Coq.Classes.Morphisms <> Proper class
R13180:13182 PL.ProbMonad <> ret meth
R13152:13156 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R13141:13151 Coq.Program.Basics <> impl def
R13157:13177 PL.ProbMonad <> imply_event def
inst 13230:13254 <> ProbMonad_ret_congr_event
R13259:13264 Coq.Classes.Morphisms <> Proper class
R13298:13300 PL.ProbMonad <> ret meth
R13270:13274 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R13267:13269 Coq.Init.Logic <> iff def
R13275:13295 PL.ProbMonad <> equiv_event def
prf 13335:13344 <> bind_assoc
binder 13357:13357 <> A:198
binder 13359:13359 <> B:199
binder 13361:13361 <> C:200
R13383:13393 PL.ProbMonad <> M rec
R13395:13395 PL.ProbMonad <> A:198 var
binder 13380:13380 <> f:201
R13412:13415 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13411:13411 PL.ProbMonad <> A:198 var
R13416:13426 PL.ProbMonad <> M rec
R13428:13428 PL.ProbMonad <> B:199 var
binder 13408:13408 <> g:202
R13445:13448 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13444:13444 PL.ProbMonad <> B:199 var
R13449:13459 PL.ProbMonad <> M rec
R13461:13461 PL.ProbMonad <> C:200 var
binder 13441:13441 <> h:203
R13484:13489 PL.ProbMonad <> ::monad_scope:x_'=='_x not
R13467:13470 PL.ProbMonad <> bind meth
R13483:13483 PL.ProbMonad <> h:203 var
R13473:13476 PL.ProbMonad <> bind meth
R13480:13480 PL.ProbMonad <> g:202 var
R13478:13478 PL.ProbMonad <> f:201 var
R13490:13493 PL.ProbMonad <> bind meth
binder 13502:13502 <> a:204
R13507:13510 PL.ProbMonad <> bind meth
R13518:13518 PL.ProbMonad <> h:203 var
R13513:13513 PL.ProbMonad <> g:202 var
R13515:13515 PL.ProbMonad <> a:204 var
R13495:13495 PL.ProbMonad <> f:201 var
prf 13554:13569 <> bind_assoc_event
binder 13582:13582 <> A:205
binder 13584:13584 <> B:206
R13606:13616 PL.ProbMonad <> M rec
R13618:13618 PL.ProbMonad <> A:205 var
binder 13603:13603 <> f:207
R13635:13638 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13634:13634 PL.ProbMonad <> A:205 var
R13639:13649 PL.ProbMonad <> M rec
R13651:13651 PL.ProbMonad <> B:206 var
binder 13631:13631 <> g:208
R13668:13671 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13667:13667 PL.ProbMonad <> B:206 var
R13672:13682 PL.ProbMonad <> M rec
binder 13664:13664 <> h:209
R13693:13713 PL.ProbMonad <> equiv_event def
R13720:13723 PL.ProbMonad <> bind meth
R13736:13736 PL.ProbMonad <> h:209 var
R13726:13729 PL.ProbMonad <> bind meth
R13733:13733 PL.ProbMonad <> g:208 var
R13731:13731 PL.ProbMonad <> f:207 var
R13744:13747 PL.ProbMonad <> bind meth
binder 13756:13756 <> a:210
R13761:13764 PL.ProbMonad <> bind meth
R13772:13772 PL.ProbMonad <> h:209 var
R13767:13767 PL.ProbMonad <> g:208 var
R13769:13769 PL.ProbMonad <> a:210 var
R13749:13749 PL.ProbMonad <> f:207 var
prf 13809:13818 <> bind_ret_l
binder 13831:13831 <> A:211
binder 13833:13833 <> B:212
R13855:13855 PL.ProbMonad <> A:211 var
binder 13852:13852 <> a:213
R13872:13875 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13871:13871 PL.ProbMonad <> A:211 var
R13876:13886 PL.ProbMonad <> M rec
R13888:13888 PL.ProbMonad <> B:212 var
binder 13868:13868 <> f:214
R13908:13911 PL.ProbMonad <> ::monad_scope:x_'=='_x not
R13894:13897 PL.ProbMonad <> bind meth
R13907:13907 PL.ProbMonad <> f:214 var
R13900:13902 PL.ProbMonad <> ret meth
R13904:13904 PL.ProbMonad <> a:213 var
R13912:13912 PL.ProbMonad <> f:214 var
R13914:13914 PL.ProbMonad <> a:213 var
prf 13949:13964 <> bind_ret_l_event
binder 13977:13977 <> A:215
R13999:13999 PL.ProbMonad <> A:215 var
binder 13996:13996 <> a:216
R14016:14019 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14015:14015 PL.ProbMonad <> A:215 var
R14020:14030 PL.ProbMonad <> M rec
binder 14012:14012 <> f:217
R14041:14061 PL.ProbMonad <> equiv_event def
R14064:14067 PL.ProbMonad <> bind meth
R14077:14077 PL.ProbMonad <> f:217 var
R14070:14072 PL.ProbMonad <> ret meth
R14074:14074 PL.ProbMonad <> a:216 var
R14081:14081 PL.ProbMonad <> f:217 var
R14083:14083 PL.ProbMonad <> a:216 var
prf 14119:14128 <> bind_ret_r
binder 14141:14141 <> A:218
R14163:14173 PL.ProbMonad <> M rec
R14175:14175 PL.ProbMonad <> A:218 var
binder 14160:14160 <> f:219
R14191:14194 PL.ProbMonad <> ::monad_scope:x_'=='_x not
R14181:14184 PL.ProbMonad <> bind meth
R14188:14190 PL.ProbMonad <> ret meth
R14186:14186 PL.ProbMonad <> f:219 var
R14195:14195 PL.ProbMonad <> f:219 var
