DIGEST 34ffcc3690c72f40e8a5b19e3c02b543
FPL.Monad
R15:33 SetsClass.SetsClass <> <> lib
R51:67 Coq.ZArith.ZArith <> <> lib
R85:103 Coq.micromega.Psatz <> <> lib
R121:141 Coq.Classes.Morphisms <> <> lib
R159:172 Coq.Lists.List <> <> lib
R190:212 Coq.Sorting.Permutation <> <> lib
R230:242 PL.FixedPoint <> <> lib
R252:263 SetsClass.SetsClass_AxiomFree SetsNotation <> mod
R273:281 PL.FixedPoint KleeneFix <> mod
R283:290 PL.FixedPoint Sets_CPO <> mod
mod 1806:1810 <> Monad
rec 1820:1824 Monad Monad
proj 1857:1860 Monad bind
proj 1911:1913 Monad ret
R1834:1837 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 1827:1827 <> M:1
binder 1871:1871 <> A:3
binder 1873:1873 <> B:4
R1886:1889 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1883:1883 PL.Monad <> M:1 var
R1885:1885 PL.Monad <> A:3 var
R1890:1890 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1899:1903 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1892:1895 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1891:1891 PL.Monad <> A:3 var
R1896:1896 PL.Monad <> M:1 var
R1898:1898 PL.Monad <> B:4 var
R1904:1904 PL.Monad <> M:1 var
R1906:1906 PL.Monad <> B:4 var
binder 1924:1924 <> A:6
R1935:1938 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1934:1934 PL.Monad <> A:6 var
R1939:1939 PL.Monad <> M:1 var
R1941:1941 PL.Monad <> A:6 var
R1952:1956 PL.Monad Monad <> mod
R1967:1971 PL.Monad Monad <> mod
mod 2068:2075 <> SetMonad
def 2373:2373 SetMonad M
binder 2376:2376 <> A:8
R2395:2398 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2394:2394 PL.Monad <> A:8 var
def 2494:2497 SetMonad bind
binder 2508:2508 <> A:9
binder 2510:2510 <> B:10
R2523:2523 PL.Monad SetMonad M def
R2525:2525 PL.Monad <> A:9 var
binder 2520:2520 <> f:11
R2533:2536 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2532:2532 PL.Monad <> A:9 var
R2537:2537 PL.Monad SetMonad M def
R2539:2539 PL.Monad <> B:10 var
binder 2529:2529 <> g:12
R2543:2543 PL.Monad SetMonad M def
R2545:2545 PL.Monad <> B:10 var
binder 2557:2557 <> A:13
binder 2559:2559 <> B:14
R2572:2572 PL.Monad SetMonad M def
R2574:2574 PL.Monad <> A:13 var
binder 2569:2569 <> f:15
R2582:2585 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2581:2581 PL.Monad <> A:13 var
R2586:2586 PL.Monad SetMonad M def
R2588:2588 PL.Monad <> B:14 var
binder 2578:2578 <> g:16
R2605:2605 PL.Monad <> B:14 var
binder 2602:2602 <> b:17
R2610:2616 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R2621:2622 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R2620:2620 PL.Monad <> A:13 var
binder 2617:2617 <> a:18
R2630:2633 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R2624:2628 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R2623:2623 PL.Monad <> a:18 var
R2629:2629 PL.Monad <> f:15 var
R2635:2639 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R2634:2634 PL.Monad <> b:17 var
R2640:2640 PL.Monad <> g:16 var
R2642:2642 PL.Monad <> a:18 var
def 2657:2659 SetMonad ret
binder 2670:2670 <> A:19
R2683:2683 PL.Monad <> A:19 var
binder 2680:2680 <> a:20
R2687:2687 PL.Monad SetMonad M def
R2689:2689 PL.Monad <> A:19 var
binder 2701:2701 <> A:21
R2714:2714 PL.Monad <> A:21 var
binder 2711:2711 <> a:22
R2720:2733 SetsClass.SetsDomain Sets singleton def
R2735:2735 PL.Monad <> a:22 var
R2743:2750 PL.Monad SetMonad <> mod
inst 2773:2781 <> set_monad
R2784:2788 PL.Monad <> Monad class
R2790:2799 PL.Monad <> M def
R2809:2812 PL.Monad <> bind meth
R2809:2812 PL.Monad <> bind meth
R2809:2812 PL.Monad <> bind meth
R2834:2836 PL.Monad <> ret meth
R2834:2836 PL.Monad <> ret meth
R2817:2829 PL.Monad <> bind def
R2841:2852 PL.Monad <> ret def
mod 2923:2932 <> StateMonad
def 2947:2947 StateMonad M
binder 2950:2951 <> Σ:23
binder 2953:2953 <> A:24
R2973:2976 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2971:2972 PL.Monad <> Σ:23 var
R2979:2981 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R2977:2978 PL.Monad <> Σ:23 var
R2982:2982 PL.Monad <> A:24 var
def 2997:3000 StateMonad bind
binder 3003:3004 <> Σ:25
binder 3024:3024 <> A:26
binder 3026:3026 <> B:27
R3039:3039 PL.Monad StateMonad M def
R3041:3042 PL.Monad <> Σ:25 var
R3044:3044 PL.Monad <> A:26 var
binder 3036:3036 <> f:28
R3052:3055 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3051:3051 PL.Monad <> A:26 var
R3056:3056 PL.Monad StateMonad M def
R3058:3059 PL.Monad <> Σ:25 var
R3061:3061 PL.Monad <> B:27 var
binder 3048:3048 <> g:29
R3065:3065 PL.Monad StateMonad M def
R3067:3068 PL.Monad <> Σ:25 var
R3070:3070 PL.Monad <> B:27 var
binder 3081:3081 <> A:30
binder 3083:3083 <> B:31
binder 3085:3085 <> f:32
binder 3087:3087 <> g:33
binder 3089:3090 <> s1:34
R3105:3105 PL.Monad <> f:32 var
R3107:3108 PL.Monad <> s1:34 var
R3121:3121 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3124:3125 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3127:3127 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3132:3132 PL.Monad <> g:33 var
def 3160:3162 StateMonad ret
binder 3165:3166 <> Σ:35
binder 3186:3186 <> A:36
R3199:3199 PL.Monad <> A:36 var
binder 3196:3196 <> a:37
R3203:3203 PL.Monad StateMonad M def
R3205:3206 PL.Monad <> Σ:35 var
R3208:3208 PL.Monad <> A:36 var
binder 3219:3219 <> A:38
binder 3221:3221 <> a:39
binder 3223:3223 <> s:40
R3228:3228 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3230:3231 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3233:3233 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3229:3229 PL.Monad <> s:40 var
R3232:3232 PL.Monad <> a:39 var
R3241:3250 PL.Monad StateMonad <> mod
inst 3273:3283 <> state_monad
binder 3286:3287 <> Σ:41
R3297:3301 PL.Monad <> Monad class
R3304:3315 PL.Monad <> M def
R3317:3318 PL.Monad <> Σ:41 var
R3329:3332 PL.Monad <> bind meth
R3329:3332 PL.Monad <> bind meth
R3329:3332 PL.Monad <> bind meth
R3359:3361 PL.Monad <> ret meth
R3359:3361 PL.Monad <> ret meth
R3337:3351 PL.Monad <> bind def
R3366:3379 PL.Monad <> ret def
R3398:3402 PL.Monad Monad <> mod
mod 3413:3429 <> SetMonadExamples0
def 3473:3477 SetMonadExamples0 any_Z
R3480:3489 PL.Monad SetMonad M def
R3491:3491 Coq.Numbers.BinNums <> Z ind
R3496:3504 SetsClass.SetsDomain Sets full meth
def 3542:3550 SetMonadExamples0 multi_two
R3554:3557 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3553:3553 Coq.Numbers.BinNums <> Z ind
R3558:3567 PL.Monad SetMonad M def
R3569:3569 Coq.Numbers.BinNums <> Z ind
binder 3580:3580 <> x:42
R3585:3587 PL.Monad Monad ret meth
R3591:3593 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R3590:3590 PL.Monad <> x:42 var
def 3633:3640 SetMonadExamples0 plus_one
R3644:3647 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3643:3643 Coq.Numbers.BinNums <> Z ind
R3648:3657 PL.Monad SetMonad M def
R3659:3659 Coq.Numbers.BinNums <> Z ind
binder 3670:3670 <> x:43
R3675:3677 PL.Monad Monad ret meth
R3681:3683 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R3680:3680 PL.Monad <> x:43 var
def 3732:3739 SetMonadExamples0 bind_ex0
R3742:3751 PL.Monad SetMonad M def
R3753:3753 Coq.Numbers.BinNums <> Z ind
R3760:3763 PL.Monad Monad bind meth
R3771:3779 PL.Monad SetMonadExamples0 multi_two def
R3765:3769 PL.Monad SetMonadExamples0 any_Z def
def 3832:3839 SetMonadExamples0 bind_ex1
R3842:3851 PL.Monad SetMonad M def
R3853:3853 Coq.Numbers.BinNums <> Z ind
R3860:3863 PL.Monad Monad bind meth
R3888:3895 PL.Monad SetMonadExamples0 plus_one def
R3866:3869 PL.Monad Monad bind meth
R3877:3885 PL.Monad SetMonadExamples0 multi_two def
R3871:3875 PL.Monad SetMonadExamples0 any_Z def
def 3910:3917 SetMonadExamples0 bind_ex2
R3920:3929 PL.Monad SetMonad M def
R3931:3931 Coq.Numbers.BinNums <> Z ind
R3938:3941 PL.Monad Monad bind meth
binder 3954:3954 <> x:44
R3959:3962 PL.Monad Monad bind meth
R3978:3985 PL.Monad SetMonadExamples0 plus_one def
R3965:3973 PL.Monad SetMonadExamples0 multi_two def
R3975:3975 PL.Monad <> x:44 var
R3943:3947 PL.Monad SetMonadExamples0 any_Z def
R3995:4011 PL.Monad SetMonadExamples0 <> mod
mod 4462:4474 <> MonadNotation
R4572:4575 PL.Monad Monad bind meth
binder 4585:4585 <> x:45
not 4552:4552 MonadNotation ::monad_scope:x_'<-'_x_';;'_x
R4699:4702 PL.Monad Monad bind meth
binder 4712:4712 <> x:46
not 4675:4675 MonadNotation ::monad_scope:x_':'_x_'<-'_x_';;'_x
R4832:4835 PL.Monad Monad bind meth
binder 4845:4845 <> x:47
R4856:4856 PL.Monad <> x:47 var
not 4806:4806 MonadNotation ::monad_scope:''''_x_'<-'_x_';;'_x
R4987:4990 PL.Monad Monad bind meth
R5003:5006 Coq.Init.Datatypes <> unit ind
not 4972:4972 MonadNotation ::monad_scope:x_';;'_x
R5073:5085 PL.Monad MonadNotation <> mod
R5095:5107 PL.Monad MonadNotation <> mod
mod 5203:5219 <> SetMonadExamples1
R5229:5245 PL.Monad SetMonadExamples0 <> mod
def 5292:5300 SetMonadExamples1 bind_ex0'
R5303:5312 PL.Monad SetMonad M def
R5314:5314 Coq.Numbers.BinNums <> Z ind
R5322:5325 PL.Monad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R5331:5333 PL.Monad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R5326:5330 PL.Monad SetMonadExamples0 any_Z def
binder 5321:5321 <> x:49
R5334:5336 PL.Monad Monad ret meth
R5340:5342 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R5339:5339 PL.Monad <> x:49 var
def 5397:5405 SetMonadExamples1 bind_ex1'
R5408:5417 PL.Monad SetMonad M def
R5419:5419 Coq.Numbers.BinNums <> Z ind
R5427:5430 PL.Monad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R5436:5438 PL.Monad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R5431:5435 PL.Monad SetMonadExamples0 any_Z def
binder 5426:5426 <> x:50
R5440:5443 PL.Monad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R5455:5457 PL.Monad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R5444:5452 PL.Monad SetMonadExamples0 multi_two def
R5454:5454 PL.Monad <> x:50 var
binder 5439:5439 <> y:51
R5458:5460 PL.Monad Monad ret meth
R5464:5466 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R5463:5463 PL.Monad <> y:51 var
R5476:5492 PL.Monad SetMonadExamples1 <> mod
mod 5541:5557 <> SetMonadOperator0
def 5620:5625 SetMonadOperator0 choice
binder 5628:5628 <> A:52
R5643:5652 PL.Monad SetMonad M def
R5654:5654 PL.Monad <> A:52 var
binder 5638:5638 <> f:53
binder 5640:5640 <> g:54
R5660:5669 PL.Monad SetMonad M def
R5671:5671 PL.Monad <> A:52 var
R5679:5683 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R5678:5678 PL.Monad <> f:53 var
R5684:5684 PL.Monad <> g:54 var
def 5888:5891 SetMonadOperator0 test
binder 5894:5894 <> P:55
R5904:5913 PL.Monad SetMonad M def
R5915:5918 Coq.Init.Datatypes <> unit ind
R5934:5934 PL.Monad <> P:55 var
R5942:5958 PL.Monad SetMonadOperator0 <> mod
mod 5969:5985 <> SetMonadExamples2
R5995:6011 PL.Monad SetMonadOperator0 <> mod
def 6026:6036 SetMonadExamples2 compute_abs
R6042:6042 Coq.Numbers.BinNums <> Z ind
binder 6039:6039 <> z:56
R6046:6055 PL.Monad SetMonad M def
R6057:6057 Coq.Numbers.BinNums <> Z ind
R6064:6069 PL.Monad SetMonadOperator0 choice def
R6117:6119 PL.Monad MonadNotation ::monad_scope:x_';;'_x not
R6104:6107 PL.Monad SetMonadOperator0 test def
R6111:6114 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R6110:6110 PL.Monad <> z:56 var
R6120:6122 PL.Monad Monad ret meth
R6125:6125 Coq.ZArith.BinInt <> ::Z_scope:'-'_x not
R6126:6126 PL.Monad <> z:56 var
R6089:6091 PL.Monad MonadNotation ::monad_scope:x_';;'_x not
R6076:6079 PL.Monad SetMonadOperator0 test def
R6083:6086 Coq.ZArith.BinInt <> ::Z_scope:x_'>='_x not
R6082:6082 PL.Monad <> z:56 var
R6092:6094 PL.Monad Monad ret meth
R6096:6096 PL.Monad <> z:56 var
R6136:6152 PL.Monad SetMonadExamples2 <> mod
mod 6217:6235 <> SetMonadProperties0
R6245:6261 PL.Monad SetMonadOperator0 <> mod
inst 6322:6330 SetMonadProperties0 bind_mono
binder 6333:6333 <> A:57
binder 6335:6335 <> B:58
R6347:6352 Coq.Classes.Morphisms <> Proper class
R6412:6415 PL.Monad Monad bind meth
R6419:6427 PL.Monad <> set_monad inst
R6429:6429 PL.Monad <> A:57 var
R6431:6431 PL.Monad <> B:58 var
R6368:6372 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R6355:6367 SetsClass.SetsDomain Sets included meth
R6386:6390 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R6373:6385 SetsClass.SetsDomain Sets included meth
R6391:6403 SetsClass.SetsDomain Sets included meth
R6451:6456 Coq.Classes.Morphisms <> Proper class
R6459:6468 Coq.Classes.Morphisms <> respectful def
R6480:6488 PL.Monad <> set_monad inst
R6491:6494 PL.Monad Monad bind meth
R6497:6509 PL.Monad SetMonad bind def
inst 6698:6707 SetMonadProperties0 bind_congr
binder 6710:6710 <> A:59
binder 6712:6712 <> B:60
R6724:6729 Coq.Classes.Morphisms <> Proper class
R6780:6783 PL.Monad Monad bind meth
R6787:6795 PL.Monad <> set_monad inst
R6797:6797 PL.Monad <> A:59 var
R6799:6799 PL.Monad <> B:60 var
R6742:6746 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R6732:6741 SetsClass.SetsDomain Sets equiv meth
R6757:6761 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R6747:6756 SetsClass.SetsDomain Sets equiv meth
R6762:6771 SetsClass.SetsDomain Sets equiv meth
R6819:6824 Coq.Classes.Morphisms <> Proper class
R6827:6836 Coq.Classes.Morphisms <> respectful def
R6848:6856 PL.Monad <> set_monad inst
R6859:6862 PL.Monad Monad bind meth
R6865:6877 PL.Monad SetMonad bind def
prf 7136:7153 SetMonadProperties0 bind_union_distr_l
binder 7165:7165 <> A:61
binder 7167:7167 <> B:62
R7173:7182 PL.Monad SetMonad M def
R7184:7184 PL.Monad <> A:61 var
binder 7170:7170 <> f:63
R7196:7199 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7195:7195 PL.Monad <> A:61 var
R7200:7209 PL.Monad SetMonad M def
R7211:7211 PL.Monad <> B:62 var
binder 7188:7189 <> g1:64
binder 7191:7192 <> g2:65
R7237:7240 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R7219:7222 PL.Monad Monad bind meth
R7229:7233 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R7227:7228 PL.Monad <> g1:64 var
R7234:7235 PL.Monad <> g2:65 var
R7224:7224 PL.Monad <> f:63 var
R7250:7254 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R7241:7244 PL.Monad Monad bind meth
R7248:7249 PL.Monad <> g1:64 var
R7246:7246 PL.Monad <> f:63 var
R7255:7258 PL.Monad Monad bind meth
R7262:7263 PL.Monad <> g2:65 var
R7260:7260 PL.Monad <> f:63 var
R7282:7290 PL.Monad <> set_monad inst
R7293:7296 PL.Monad Monad bind meth
R7299:7311 PL.Monad SetMonad bind def
prf 7477:7494 SetMonadProperties0 bind_union_distr_r
binder 7506:7506 <> A:66
binder 7508:7508 <> B:67
R7518:7527 PL.Monad SetMonad M def
R7529:7529 PL.Monad <> A:66 var
binder 7511:7512 <> f1:68
binder 7514:7515 <> f2:69
R7537:7540 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7536:7536 PL.Monad <> A:66 var
R7541:7550 PL.Monad SetMonad M def
R7552:7552 PL.Monad <> B:67 var
binder 7533:7533 <> g:70
R7578:7581 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R7560:7563 PL.Monad Monad bind meth
R7577:7577 PL.Monad <> g:70 var
R7568:7572 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R7566:7567 PL.Monad <> f1:68 var
R7573:7574 PL.Monad <> f2:69 var
R7591:7595 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R7582:7585 PL.Monad Monad bind meth
R7590:7590 PL.Monad <> g:70 var
R7587:7588 PL.Monad <> f1:68 var
R7596:7599 PL.Monad Monad bind meth
R7604:7604 PL.Monad <> g:70 var
R7601:7602 PL.Monad <> f2:69 var
R7623:7631 PL.Monad <> set_monad inst
R7634:7637 PL.Monad Monad bind meth
R7640:7652 PL.Monad SetMonad bind def
prf 7818:7843 SetMonadProperties0 bind_indexed_union_distr_l
binder 7855:7855 <> A:71
binder 7857:7857 <> B:72
binder 7859:7859 <> I:73
R7865:7874 PL.Monad SetMonad M def
R7876:7876 PL.Monad <> A:71 var
binder 7862:7862 <> f:74
R7884:7887 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7883:7883 PL.Monad <> I:73 var
R7889:7892 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R7888:7888 PL.Monad <> A:71 var
R7893:7902 PL.Monad SetMonad M def
R7904:7904 PL.Monad <> B:72 var
binder 7880:7880 <> g:75
R7926:7929 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R7912:7915 PL.Monad Monad bind meth
R7920:7923 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R7924:7924 PL.Monad <> g:75 var
R7917:7917 PL.Monad <> f:74 var
R7930:7934 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R7959:7959 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R7942:7942 PL.Monad <> I:73 var
binder 7939:7939 <> i:76
R7947:7950 PL.Monad Monad bind meth
R7955:7955 PL.Monad <> g:75 var
R7957:7957 PL.Monad <> i:76 var
R7952:7952 PL.Monad <> f:74 var
R7978:7986 PL.Monad <> set_monad inst
R7989:7992 PL.Monad Monad bind meth
R7995:8007 PL.Monad SetMonad bind def
prf 8172:8197 SetMonadProperties0 bind_indexed_union_distr_r
binder 8209:8209 <> A:77
binder 8211:8211 <> B:78
binder 8213:8213 <> I:79
R8220:8223 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8219:8219 PL.Monad <> I:79 var
R8224:8233 PL.Monad SetMonad M def
R8235:8235 PL.Monad <> A:77 var
binder 8216:8216 <> f:80
R8243:8246 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8242:8242 PL.Monad <> A:77 var
R8247:8256 PL.Monad SetMonad M def
R8258:8258 PL.Monad <> B:78 var
binder 8239:8239 <> g:81
R8280:8283 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R8266:8269 PL.Monad Monad bind meth
R8279:8279 PL.Monad <> g:81 var
R8272:8275 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R8276:8276 PL.Monad <> f:80 var
R8284:8288 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R8313:8313 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R8296:8296 PL.Monad <> I:79 var
binder 8293:8293 <> i:82
R8301:8304 PL.Monad Monad bind meth
R8312:8312 PL.Monad <> g:81 var
R8307:8307 PL.Monad <> f:80 var
R8309:8309 PL.Monad <> i:82 var
R8332:8340 PL.Monad <> set_monad inst
R8343:8346 PL.Monad Monad bind meth
R8349:8361 PL.Monad SetMonad bind def
prf 8614:8623 SetMonadProperties0 bind_assoc
binder 8636:8636 <> A:83
binder 8638:8638 <> B:84
binder 8640:8640 <> C:85
R8662:8671 PL.Monad SetMonad M def
R8673:8673 PL.Monad <> A:83 var
binder 8659:8659 <> f:86
R8690:8693 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8689:8689 PL.Monad <> A:83 var
R8694:8703 PL.Monad SetMonad M def
R8705:8705 PL.Monad <> B:84 var
binder 8686:8686 <> g:87
R8722:8725 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8721:8721 PL.Monad <> B:84 var
R8726:8735 PL.Monad SetMonad M def
R8737:8737 PL.Monad <> C:85 var
binder 8718:8718 <> h:88
R8760:8765 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R8743:8746 PL.Monad Monad bind meth
R8759:8759 PL.Monad <> h:88 var
R8749:8752 PL.Monad Monad bind meth
R8756:8756 PL.Monad <> g:87 var
R8754:8754 PL.Monad <> f:86 var
R8766:8769 PL.Monad Monad bind meth
binder 8778:8778 <> a:89
R8783:8786 PL.Monad Monad bind meth
R8794:8794 PL.Monad <> h:88 var
R8789:8789 PL.Monad <> g:87 var
R8791:8791 PL.Monad <> a:89 var
R8771:8771 PL.Monad <> f:86 var
R8814:8822 PL.Monad <> set_monad inst
R8825:8828 PL.Monad Monad bind meth
R8831:8843 PL.Monad SetMonad bind def
prf 9328:9337 SetMonadProperties0 bind_ret_l
binder 9350:9350 <> A:90
binder 9352:9352 <> B:91
R9374:9374 PL.Monad <> A:90 var
binder 9371:9371 <> a:92
R9391:9394 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9390:9390 PL.Monad <> A:90 var
R9395:9404 PL.Monad SetMonad M def
R9406:9406 PL.Monad <> B:91 var
binder 9387:9387 <> f:93
R9426:9429 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R9412:9415 PL.Monad Monad bind meth
R9425:9425 PL.Monad <> f:93 var
R9418:9420 PL.Monad Monad ret meth
R9422:9422 PL.Monad <> a:92 var
R9430:9430 PL.Monad <> f:93 var
R9432:9432 PL.Monad <> a:92 var
R9451:9459 PL.Monad <> set_monad inst
R9462:9465 PL.Monad Monad bind meth
R9468:9480 PL.Monad SetMonad bind def
R9483:9494 PL.Monad SetMonad ret def
R9571:9573 PL.Monad Monad ret meth
R9655:9657 PL.Monad Monad ret meth
prf 9869:9878 SetMonadProperties0 bind_ret_r
binder 9891:9891 <> A:94
R9913:9922 PL.Monad SetMonad M def
R9924:9924 PL.Monad <> A:94 var
binder 9910:9910 <> f:95
R9940:9943 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R9930:9933 PL.Monad Monad bind meth
R9937:9939 PL.Monad Monad ret meth
R9935:9935 PL.Monad <> f:95 var
R9944:9944 PL.Monad <> f:95 var
R9963:9971 PL.Monad <> set_monad inst
R9974:9977 PL.Monad Monad bind meth
R9980:9992 PL.Monad SetMonad bind def
R9995:10006 PL.Monad SetMonad ret def
R10083:10085 PL.Monad Monad ret meth
R10165:10167 PL.Monad Monad ret meth
R10282:10300 PL.Monad SetMonadProperties0 <> mod
mod 10311:10327 <> SetMonadOperator1
R10337:10353 PL.Monad SetMonadOperator0 <> mod
R10362:10380 PL.Monad SetMonadProperties0 <> mod
ind 10742:10756 SetMonadOperator1 ContinueOrBreak
constr 10781:10791 SetMonadOperator1 by_continue
constr 10802:10809 SetMonadOperator1 by_break
binder 10759:10759 <> A:96
binder 10761:10761 <> B:97
R10797:10797 PL.Monad <> A:96 var
binder 10794:10794 <> a:100
R10815:10815 PL.Monad <> B:97 var
binder 10812:10812 <> b:101
R10830:10840 PL.Monad SetMonadOperator1 by_continue constr
R10830:10840 PL.Monad SetMonadOperator1 by_continue constr
R10865:10872 PL.Monad SetMonadOperator1 by_break constr
R10865:10872 PL.Monad SetMonadOperator1 by_break constr
def 10946:10959 SetMonadOperator1 repeat_break_f
binder 10975:10975 <> A:102
binder 10977:10977 <> B:103
R11007:11010 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11006:11006 PL.Monad <> A:102 var
R11011:11020 PL.Monad SetMonad M def
R11023:11037 PL.Monad SetMonadOperator1 ContinueOrBreak ind
R11039:11039 PL.Monad <> A:102 var
R11041:11041 PL.Monad <> B:103 var
binder 11000:11003 <> body:104
R11063:11066 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11062:11062 PL.Monad <> A:102 var
R11067:11076 PL.Monad SetMonad M def
R11078:11078 PL.Monad <> B:103 var
binder 11059:11059 <> W:105
R11098:11098 PL.Monad <> A:102 var
binder 11095:11095 <> a:106
R11102:11111 PL.Monad SetMonad M def
R11113:11113 PL.Monad <> B:103 var
R11121:11124 PL.Monad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R11131:11135 PL.Monad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R11125:11128 PL.Monad <> body:104 var
R11130:11130 PL.Monad <> a:106 var
binder 11120:11120 <> x:107
R11142:11142 PL.Monad <> x:107 var
R11153:11163 PL.Monad SetMonadOperator1 by_continue constr
R11171:11171 PL.Monad <> W:105 var
R11180:11187 PL.Monad SetMonadOperator1 by_break constr
R11194:11196 PL.Monad Monad ret meth
def 11219:11230 SetMonadOperator1 repeat_break
binder 11246:11246 <> A:109
binder 11248:11248 <> B:110
R11278:11281 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11277:11277 PL.Monad <> A:109 var
R11282:11291 PL.Monad SetMonad M def
R11294:11308 PL.Monad SetMonadOperator1 ContinueOrBreak ind
R11310:11310 PL.Monad <> A:109 var
R11312:11312 PL.Monad <> B:110 var
binder 11271:11274 <> body:111
R11320:11323 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11319:11319 PL.Monad <> A:109 var
R11324:11333 PL.Monad SetMonad M def
R11335:11335 PL.Monad <> B:110 var
R11342:11352 PL.FixedPoint KleeneFix Kleene_LFix def
R11355:11368 PL.Monad SetMonadOperator1 repeat_break_f def
R11370:11373 PL.Monad <> body:111 var
prf 11500:11518 SetMonadOperator1 repeat_break_f_mono
binder 11531:11531 <> A:112
binder 11533:11533 <> B:113
R11559:11562 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11558:11558 PL.Monad <> A:112 var
R11563:11572 PL.Monad SetMonad M def
R11575:11589 PL.Monad SetMonadOperator1 ContinueOrBreak ind
R11591:11591 PL.Monad <> A:112 var
R11593:11593 PL.Monad <> B:113 var
binder 11552:11555 <> body:114
R11600:11603 PL.FixedPoint KleeneFix mono def
R11606:11619 PL.Monad SetMonadOperator1 repeat_break_f def
R11621:11624 PL.Monad <> body:114 var
R11654:11657 PL.FixedPoint KleeneFix mono def
R11660:11668 PL.FixedPoint KleeneFix order_rel def
R11671:11676 PL.FixedPoint Sets_CPO R_sets inst
R11707:11720 PL.Monad SetMonadOperator1 repeat_break_f def
R11741:11749 PL.Monad SetMonadProperties0 bind_mono inst
R11741:11749 PL.Monad SetMonadProperties0 bind_mono inst
prf 11846:11870 SetMonadOperator1 repeat_break_f_continuous
binder 11883:11883 <> A:115
binder 11885:11885 <> B:116
R11911:11914 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11910:11910 PL.Monad <> A:115 var
R11915:11924 PL.Monad SetMonad M def
R11927:11941 PL.Monad SetMonadOperator1 ContinueOrBreak ind
R11943:11943 PL.Monad <> A:115 var
R11945:11945 PL.Monad <> B:116 var
binder 11904:11907 <> body:117
R11952:11961 PL.FixedPoint KleeneFix continuous def
R11964:11977 PL.Monad SetMonadOperator1 repeat_break_f def
R11979:11982 PL.Monad <> body:117 var
R12012:12021 PL.FixedPoint KleeneFix continuous def
R12066:12079 PL.Monad SetMonadOperator1 repeat_break_f def
R12091:12094 PL.Monad Monad bind meth
R12097:12105 PL.Monad <> set_monad inst
R12108:12120 PL.Monad SetMonad bind def
R12234:12244 PL.Monad SetMonadOperator1 by_continue constr
R12234:12244 PL.Monad SetMonadOperator1 by_continue constr
R12277:12277 Coq.Init.Datatypes <> O constr
R12281:12288 PL.Monad SetMonadOperator1 by_break constr
R12277:12277 Coq.Init.Datatypes <> O constr
R12281:12288 PL.Monad SetMonadOperator1 by_break constr
R12356:12366 PL.Monad SetMonadOperator1 by_continue constr
R12356:12366 PL.Monad SetMonadOperator1 by_continue constr
R12434:12441 PL.Monad SetMonadOperator1 by_break constr
R12434:12441 PL.Monad SetMonadOperator1 by_break constr
prf 12497:12516 SetMonadOperator1 repeat_break_unroll1
binder 12529:12529 <> A:118
binder 12531:12531 <> B:119
R12557:12560 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12556:12556 PL.Monad <> A:118 var
R12561:12570 PL.Monad SetMonad M def
R12573:12587 PL.Monad SetMonadOperator1 ContinueOrBreak ind
R12589:12589 PL.Monad <> A:118 var
R12591:12591 PL.Monad <> B:119 var
binder 12550:12553 <> body:120
R12608:12608 PL.Monad <> A:118 var
binder 12605:12605 <> a:121
R12635:12642 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R12616:12627 PL.Monad SetMonadOperator1 repeat_break def
R12634:12634 PL.Monad <> a:121 var
R12629:12632 PL.Monad <> body:120 var
R12644:12647 PL.Monad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R12654:12660 PL.Monad MonadNotation ::monad_scope:x_'<-'_x_';;'_x not
R12648:12651 PL.Monad <> body:120 var
R12653:12653 PL.Monad <> a:121 var
binder 12643:12643 <> x:122
R12667:12667 PL.Monad <> x:122 var
R12680:12690 PL.Monad SetMonadOperator1 by_continue constr
R12698:12709 PL.Monad SetMonadOperator1 repeat_break def
R12711:12714 PL.Monad <> body:120 var
R12725:12732 PL.Monad SetMonadOperator1 by_break constr
R12739:12741 PL.Monad Monad ret meth
R12792:12809 PL.FixedPoint KleeneFix Kleene_LFix_is_fix thm
R12903:12927 PL.Monad SetMonadOperator1 repeat_break_f_continuous thm
R12864:12882 PL.Monad SetMonadOperator1 repeat_break_f_mono thm
R12827:12840 PL.Monad SetMonadOperator1 repeat_break_f def
R12792:12809 PL.FixedPoint KleeneFix Kleene_LFix_is_fix thm
R12903:12927 PL.Monad SetMonadOperator1 repeat_break_f_continuous thm
R12864:12882 PL.Monad SetMonadOperator1 repeat_break_f_mono thm
R12827:12840 PL.Monad SetMonadOperator1 repeat_break_f def
def 13026:13033 SetMonadOperator1 continue
binder 13036:13036 <> A:124
binder 13038:13038 <> B:125
R13051:13051 PL.Monad <> A:124 var
binder 13048:13048 <> a:126
R13057:13066 PL.Monad SetMonad M def
R13069:13083 PL.Monad SetMonadOperator1 ContinueOrBreak ind
R13085:13085 PL.Monad <> A:124 var
R13087:13087 PL.Monad <> B:125 var
R13095:13097 PL.Monad Monad ret meth
R13100:13110 PL.Monad SetMonadOperator1 by_continue constr
R13112:13112 PL.Monad <> a:126 var
def 13128:13132 SetMonadOperator1 break
binder 13135:13135 <> A:127
binder 13137:13137 <> B:128
R13150:13150 PL.Monad <> B:128 var
binder 13147:13147 <> b:129
R13156:13165 PL.Monad SetMonad M def
R13168:13182 PL.Monad SetMonadOperator1 ContinueOrBreak ind
R13184:13184 PL.Monad <> A:127 var
R13186:13186 PL.Monad <> B:128 var
R13194:13196 PL.Monad Monad ret meth
R13199:13206 PL.Monad SetMonadOperator1 by_break constr
R13208:13208 PL.Monad <> b:129 var
R13217:13233 PL.Monad SetMonadOperator1 <> mod
mod 13279:13291 <> SetMonadHoare
R13301:13317 PL.Monad SetMonadOperator0 <> mod
R13326:13342 PL.Monad SetMonadOperator1 <> mod
def 13477:13481 SetMonadHoare Hoare
binder 13484:13484 <> A:130
R13497:13506 PL.Monad SetMonad M def
R13508:13508 PL.Monad <> A:130 var
binder 13494:13494 <> c:131
R13516:13519 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13515:13515 PL.Monad <> A:130 var
binder 13512:13512 <> P:132
binder 13544:13544 <> a:133
R13554:13557 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13548:13552 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R13547:13547 PL.Monad <> a:133 var
R13553:13553 PL.Monad <> c:131 var
R13558:13558 PL.Monad <> P:132 var
R13560:13560 PL.Monad <> a:133 var
prf 13781:13790 SetMonadHoare Hoare_bind
binder 13793:13793 <> A:134
binder 13795:13795 <> B:135
R13818:13827 PL.Monad SetMonad M def
R13829:13829 PL.Monad <> A:134 var
binder 13815:13815 <> f:136
R13846:13849 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13845:13845 PL.Monad <> A:134 var
R13850:13859 PL.Monad SetMonad M def
R13861:13861 PL.Monad <> B:135 var
binder 13842:13842 <> g:137
R13878:13881 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13877:13877 PL.Monad <> A:134 var
binder 13874:13874 <> P:138
R13902:13905 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13901:13901 PL.Monad <> B:135 var
binder 13898:13898 <> Q:139
R13926:13933 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13917:13921 PL.Monad SetMonadHoare Hoare def
R13925:13925 PL.Monad <> P:138 var
R13923:13923 PL.Monad <> f:136 var
R13934:13934 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13965:13973 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 13942:13942 <> a:140
R13948:13951 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13945:13945 PL.Monad <> P:138 var
R13947:13947 PL.Monad <> a:140 var
R13952:13956 PL.Monad SetMonadHoare Hoare def
R13964:13964 PL.Monad <> Q:139 var
R13959:13959 PL.Monad <> g:137 var
R13961:13961 PL.Monad <> a:140 var
R13974:13978 PL.Monad SetMonadHoare Hoare def
R13991:13991 PL.Monad <> Q:139 var
R13981:13984 PL.Monad Monad bind meth
R13988:13988 PL.Monad <> g:137 var
R13986:13986 PL.Monad <> f:136 var
R14020:14024 PL.Monad SetMonadHoare Hoare def
R14049:14052 PL.Monad Monad bind meth
R14055:14063 PL.Monad <> set_monad inst
R14066:14078 PL.Monad SetMonad bind def
prf 14256:14264 SetMonadHoare Hoare_ret
binder 14267:14267 <> A:141
R14290:14290 PL.Monad <> A:141 var
binder 14287:14287 <> a:142
R14298:14301 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14297:14297 PL.Monad <> A:141 var
binder 14294:14294 <> P:143
R14316:14319 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14313:14313 PL.Monad <> P:143 var
R14315:14315 PL.Monad <> a:142 var
R14320:14324 PL.Monad SetMonadHoare Hoare def
R14334:14334 PL.Monad <> P:143 var
R14327:14329 PL.Monad Monad ret meth
R14331:14331 PL.Monad <> a:142 var
R14363:14367 PL.Monad SetMonadHoare Hoare def
R14370:14372 PL.Monad Monad ret meth
R14375:14383 PL.Monad <> set_monad inst
R14386:14397 PL.Monad SetMonad ret def
prf 14515:14526 SetMonadHoare Hoare_conseq
binder 14529:14529 <> A:144
R14552:14561 PL.Monad SetMonad M def
R14563:14563 PL.Monad <> A:144 var
binder 14549:14549 <> f:145
R14573:14576 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14572:14572 PL.Monad <> A:144 var
binder 14567:14567 <> P:146
binder 14569:14569 <> Q:147
R14588:14588 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14609:14617 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 14596:14596 <> a:148
R14602:14605 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14599:14599 PL.Monad <> P:146 var
R14601:14601 PL.Monad <> a:148 var
R14606:14606 PL.Monad <> Q:147 var
R14608:14608 PL.Monad <> a:148 var
R14627:14634 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14618:14622 PL.Monad SetMonadHoare Hoare def
R14626:14626 PL.Monad <> P:146 var
R14624:14624 PL.Monad <> f:145 var
R14635:14639 PL.Monad SetMonadHoare Hoare def
R14643:14643 PL.Monad <> Q:147 var
R14641:14641 PL.Monad <> f:145 var
R14662:14666 PL.Monad SetMonadHoare Hoare def
prf 14750:14763 SetMonadHoare Hoare_conjunct
binder 14766:14766 <> A:149
R14789:14798 PL.Monad SetMonad M def
R14800:14800 PL.Monad <> A:149 var
binder 14786:14786 <> f:150
R14810:14813 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14809:14809 PL.Monad <> A:149 var
binder 14804:14804 <> P:151
binder 14806:14806 <> Q:152
R14834:14841 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14825:14829 PL.Monad SetMonadHoare Hoare def
R14833:14833 PL.Monad <> P:151 var
R14831:14831 PL.Monad <> f:150 var
R14851:14858 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14842:14846 PL.Monad SetMonadHoare Hoare def
R14850:14850 PL.Monad <> Q:152 var
R14848:14848 PL.Monad <> f:150 var
R14859:14863 PL.Monad SetMonadHoare Hoare def
binder 14872:14872 <> a:153
R14880:14883 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R14877:14877 PL.Monad <> P:151 var
R14879:14879 PL.Monad <> a:153 var
R14884:14884 PL.Monad <> Q:152 var
R14886:14886 PL.Monad <> a:153 var
R14865:14865 PL.Monad <> f:150 var
R14906:14910 PL.Monad SetMonadHoare Hoare def
prf 15031:15042 SetMonadHoare Hoare_choice
binder 15045:15045 <> A:154
R15070:15079 PL.Monad SetMonad M def
R15081:15081 PL.Monad <> A:154 var
binder 15065:15065 <> f:155
binder 15067:15067 <> g:156
R15098:15101 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15097:15097 PL.Monad <> A:154 var
binder 15094:15094 <> P:157
R15122:15129 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15113:15117 PL.Monad SetMonadHoare Hoare def
R15121:15121 PL.Monad <> P:157 var
R15119:15119 PL.Monad <> f:155 var
R15139:15146 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15130:15134 PL.Monad SetMonadHoare Hoare def
R15138:15138 PL.Monad <> P:157 var
R15136:15136 PL.Monad <> g:156 var
R15147:15151 PL.Monad SetMonadHoare Hoare def
R15166:15166 PL.Monad <> P:157 var
R15154:15159 PL.Monad SetMonadOperator0 choice def
R15163:15163 PL.Monad <> g:156 var
R15161:15161 PL.Monad <> f:155 var
R15195:15199 PL.Monad SetMonadHoare Hoare def
R15222:15227 PL.Monad SetMonadOperator0 choice def
prf 15311:15325 SetMonadHoare Hoare_test_bind
binder 15328:15328 <> A:158
binder 15348:15348 <> P:159
R15370:15379 PL.Monad SetMonad M def
R15381:15381 PL.Monad <> A:158 var
binder 15367:15367 <> f:160
R15398:15401 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15397:15397 PL.Monad <> A:158 var
binder 15394:15394 <> Q:161
R15413:15413 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15428:15437 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15458:15458 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15415:15418 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15414:15414 PL.Monad <> P:159 var
R15419:15423 PL.Monad SetMonadHoare Hoare def
R15427:15427 PL.Monad <> Q:161 var
R15425:15425 PL.Monad <> f:160 var
R15438:15442 PL.Monad SetMonadHoare Hoare def
R15457:15457 PL.Monad <> Q:161 var
R15451:15453 PL.Monad MonadNotation ::monad_scope:x_';;'_x not
R15445:15448 PL.Monad SetMonadOperator0 test def
R15450:15450 PL.Monad <> P:159 var
R15454:15454 PL.Monad <> f:160 var
R15487:15496 PL.Monad SetMonadHoare Hoare_bind thm
R15487:15496 PL.Monad SetMonadHoare Hoare_bind thm
R15528:15532 PL.Monad SetMonadHoare Hoare def
R15535:15538 PL.Monad SetMonadOperator0 test def
prf 15956:15973 SetMonadHoare Hoare_repeat_break
binder 15976:15976 <> A:162
binder 15978:15978 <> B:163
R16005:16008 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16004:16004 PL.Monad <> A:162 var
R16009:16018 PL.Monad SetMonad M def
R16021:16035 PL.Monad SetMonadOperator1 ContinueOrBreak ind
R16037:16037 PL.Monad <> A:162 var
R16039:16039 PL.Monad <> B:163 var
binder 15998:16001 <> body:164
R16057:16060 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16056:16056 PL.Monad <> A:162 var
binder 16053:16053 <> P:165
R16081:16084 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16080:16080 PL.Monad <> B:163 var
binder 16077:16077 <> Q:166
R16096:16096 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16334:16343 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16390:16390 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 16104:16104 <> a:167
R16110:16128 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16107:16107 PL.Monad <> P:165 var
R16109:16109 PL.Monad <> a:167 var
R16129:16133 PL.Monad SetMonadHoare Hoare def
binder 16149:16149 <> x:168
R16160:16160 PL.Monad <> x:168 var
R16209:16219 PL.Monad SetMonadOperator1 by_continue constr
R16226:16226 PL.Monad <> P:165 var
R16228:16228 PL.Monad <> a:167 var
R16272:16279 PL.Monad SetMonadOperator1 by_break constr
R16286:16286 PL.Monad <> Q:166 var
R16136:16139 PL.Monad <> body:164 var
R16141:16141 PL.Monad <> a:167 var
binder 16351:16351 <> a:170
R16357:16360 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16354:16354 PL.Monad <> P:165 var
R16356:16356 PL.Monad <> a:170 var
R16361:16365 PL.Monad SetMonadHoare Hoare def
R16389:16389 PL.Monad <> Q:166 var
R16368:16379 PL.Monad SetMonadOperator1 repeat_break def
R16386:16386 PL.Monad <> a:170 var
R16381:16384 PL.Monad <> body:164 var
R16419:16423 PL.Monad SetMonadHoare Hoare def
R16460:16471 PL.Monad SetMonadOperator1 repeat_break def
R16474:16484 PL.FixedPoint KleeneFix Kleene_LFix def
binder 16557:16557 <> a:171
R16563:16566 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16562:16562 PL.Monad <> a:171 var
R16567:16571 PL.Monad SetMonadHoare Hoare def
R16574:16581 Coq.Arith.PeanoNat Nat iter def
R16611:16611 PL.Monad <> a:171 var
R16607:16609 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R16586:16599 PL.Monad SetMonadOperator1 repeat_break_f def
binder 16557:16557 <> a:172
R16563:16566 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16562:16562 PL.Monad <> a:172 var
R16567:16571 PL.Monad SetMonadHoare Hoare def
R16574:16581 Coq.Arith.PeanoNat Nat iter def
R16611:16611 PL.Monad <> a:172 var
R16607:16609 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R16586:16599 PL.Monad SetMonadOperator1 repeat_break_f def
R16659:16663 PL.Monad SetMonadHoare Hoare def
R16705:16718 PL.Monad SetMonadOperator1 repeat_break_f def
R16737:16746 PL.Monad SetMonadHoare Hoare_bind thm
R16737:16746 PL.Monad SetMonadHoare Hoare_bind thm
R16825:16833 PL.Monad SetMonadHoare Hoare_ret thm
R16825:16833 PL.Monad SetMonadHoare Hoare_ret thm
R16846:16858 PL.Monad SetMonadHoare <> mod
mod 16869:16885 <> SetMonadExamples3
R16895:16907 PL.Monad SetMonadHoare <> mod
R16916:16932 PL.Monad SetMonadOperator0 <> mod
R16941:16957 PL.Monad SetMonadOperator1 <> mod
def 17013:17020 SetMonadExamples3 body_3x1
R17026:17026 Coq.Numbers.BinNums <> Z ind
binder 17023:17023 <> x:173
R17030:17039 PL.Monad SetMonad M def
R17042:17056 PL.Monad SetMonadOperator1 ContinueOrBreak ind
R17058:17058 Coq.Numbers.BinNums <> Z ind
R17060:17060 Coq.Numbers.BinNums <> Z ind
R17068:17073 PL.Monad SetMonadOperator0 choice def
R17110:17115 PL.Monad SetMonadOperator0 choice def
R17225:17234 PL.Monad MonadNotation ::monad_scope:x_';;'_x not
R17185:17188 PL.Monad SetMonadOperator0 test def
R17191:17197 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R17199:17200 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 17198:17198 <> k:174
R17207:17210 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R17202:17205 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R17201:17201 PL.Monad <> k:174 var
R17212:17214 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17211:17211 PL.Monad <> x:173 var
R17220:17222 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R17216:17218 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R17219:17219 PL.Monad <> k:174 var
R17235:17242 PL.Monad SetMonadOperator1 continue def
R17250:17252 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R17246:17248 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R17249:17249 PL.Monad <> x:173 var
R17150:17159 PL.Monad MonadNotation ::monad_scope:x_';;'_x not
R17124:17127 PL.Monad SetMonadOperator0 test def
R17130:17136 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R17138:17139 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 17137:17137 <> k:175
R17141:17143 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17140:17140 PL.Monad <> x:173 var
R17145:17147 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R17148:17148 PL.Monad <> k:175 var
R17160:17167 PL.Monad SetMonadOperator1 continue def
R17171:17173 Coq.ZArith.BinInt <> ::Z_scope:x_'/'_x not
R17170:17170 PL.Monad <> x:173 var
R17093:17095 PL.Monad MonadNotation ::monad_scope:x_';;'_x not
R17080:17083 PL.Monad SetMonadOperator0 test def
R17087:17090 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R17086:17086 PL.Monad <> x:173 var
R17096:17100 PL.Monad SetMonadOperator1 break def
R17102:17102 PL.Monad <> x:173 var
def 17271:17277 SetMonadExamples3 run_3x1
R17281:17284 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17280:17280 Coq.Numbers.BinNums <> Z ind
R17285:17294 PL.Monad SetMonad M def
R17296:17296 Coq.Numbers.BinNums <> Z ind
R17303:17314 PL.Monad SetMonadOperator1 repeat_break def
R17316:17323 PL.Monad SetMonadExamples3 body_3x1 def
prf 17424:17449 SetMonadExamples3 functional_correctness_3x1
R17464:17464 Coq.Numbers.BinNums <> Z ind
binder 17461:17461 <> n:176
R17477:17484 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17472:17475 Coq.ZArith.BinInt <> ::Z_scope:x_'>='_x not
R17471:17471 PL.Monad <> n:176 var
R17485:17489 PL.Monad SetMonadHoare Hoare def
binder 17508:17508 <> m:177
R17514:17516 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17513:17513 PL.Monad <> m:177 var
R17492:17498 PL.Monad SetMonadExamples3 run_3x1 def
R17500:17500 PL.Monad <> n:176 var
R17536:17553 PL.Monad SetMonadHoare Hoare_repeat_break thm
R17536:17553 PL.Monad SetMonadHoare Hoare_repeat_break thm
R17575:17582 PL.Monad SetMonadExamples3 body_3x1 def
R17600:17611 PL.Monad SetMonadHoare Hoare_choice thm
R17600:17611 PL.Monad SetMonadHoare Hoare_choice thm
R17600:17611 PL.Monad SetMonadHoare Hoare_choice thm
R17600:17611 PL.Monad SetMonadHoare Hoare_choice thm
R17600:17611 PL.Monad SetMonadHoare Hoare_choice thm
R17600:17611 PL.Monad SetMonadHoare Hoare_choice thm
R17624:17638 PL.Monad SetMonadHoare Hoare_test_bind thm
R17624:17638 PL.Monad SetMonadHoare Hoare_test_bind thm
R17663:17671 PL.Monad SetMonadHoare Hoare_ret thm
R17663:17671 PL.Monad SetMonadHoare Hoare_ret thm
R17693:17707 PL.Monad SetMonadHoare Hoare_test_bind thm
R17693:17707 PL.Monad SetMonadHoare Hoare_test_bind thm
R17732:17740 PL.Monad SetMonadHoare Hoare_ret thm
R17732:17740 PL.Monad SetMonadHoare Hoare_ret thm
R17794:17803 Coq.ZArith.BinInt Z mul_comm thm
R17806:17820 Coq.ZArith.Zdiv <> Z_div_mult_full thm
R17794:17803 Coq.ZArith.BinInt Z mul_comm thm
R17794:17803 Coq.ZArith.BinInt Z mul_comm thm
R17806:17820 Coq.ZArith.Zdiv <> Z_div_mult_full thm
R17806:17820 Coq.ZArith.Zdiv <> Z_div_mult_full thm
R17849:17863 PL.Monad SetMonadHoare Hoare_test_bind thm
R17849:17863 PL.Monad SetMonadHoare Hoare_test_bind thm
R17888:17896 PL.Monad SetMonadHoare Hoare_ret thm
R17888:17896 PL.Monad SetMonadHoare Hoare_ret thm
def 17972:17989 SetMonadExamples3 body_binary_search
R17996:17999 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17995:17995 Coq.Numbers.BinNums <> Z ind
binder 17992:17992 <> P:178
R18014:18017 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18010:18012 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R18009:18009 Coq.Numbers.BinNums <> Z ind
R18013:18013 Coq.Numbers.BinNums <> Z ind
R18018:18027 PL.Monad SetMonad M def
R18030:18044 PL.Monad SetMonadOperator1 ContinueOrBreak ind
R18048:18050 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R18047:18047 Coq.Numbers.BinNums <> Z ind
R18051:18051 Coq.Numbers.BinNums <> Z ind
R18054:18054 Coq.Numbers.BinNums <> Z ind
R18067:18067 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18070:18071 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18074:18074 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 18072:18073 <> hi:179
binder 18068:18069 <> lo:180
binder 18067:18074 <> pat:181
R18081:18086 PL.Monad SetMonadOperator0 choice def
R18147:18154 PL.Monad MonadNotation ::monad_scope:x_';;'_x not
R18129:18132 PL.Monad SetMonadOperator0 test def
R18141:18143 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R18137:18139 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18135:18136 PL.Monad <> lo:180 var
R18144:18145 PL.Monad <> hi:179 var
R18166:18166 Coq.ZArith.BinInt <> ::Z_scope:x_'/'_x not
R18174:18177 Coq.ZArith.BinInt <> ::Z_scope:x_'/'_x not
R18169:18171 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18167:18168 PL.Monad <> lo:180 var
R18172:18173 PL.Monad <> hi:179 var
binder 18159:18161 <> mid:182
R18188:18193 PL.Monad SetMonadOperator0 choice def
R18260:18262 PL.Monad MonadNotation ::monad_scope:x_';;'_x not
R18246:18249 PL.Monad SetMonadOperator0 test def
R18252:18253 Coq.Init.Logic <> ::type_scope:'~'_x not
R18254:18254 PL.Monad <> P:178 var
R18256:18258 PL.Monad <> mid:182 var
R18263:18270 PL.Monad SetMonadOperator1 continue def
R18272:18272 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18275:18276 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18280:18280 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18273:18274 PL.Monad <> lo:180 var
R18277:18279 PL.Monad <> mid:182 var
R18215:18217 PL.Monad MonadNotation ::monad_scope:x_';;'_x not
R18203:18206 PL.Monad SetMonadOperator0 test def
R18209:18209 PL.Monad <> P:178 var
R18211:18213 PL.Monad <> mid:182 var
R18218:18225 PL.Monad SetMonadOperator1 continue def
R18227:18227 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18231:18232 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18235:18235 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18228:18230 PL.Monad <> mid:182 var
R18233:18234 PL.Monad <> hi:179 var
R18111:18113 PL.Monad MonadNotation ::monad_scope:x_';;'_x not
R18093:18096 PL.Monad SetMonadOperator0 test def
R18105:18107 Coq.Init.Logic <> ::type_scope:x_'='_x not
R18101:18103 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18099:18100 PL.Monad <> lo:180 var
R18108:18109 PL.Monad <> hi:179 var
R18114:18118 PL.Monad SetMonadOperator1 break def
R18120:18121 PL.Monad <> lo:180 var
def 18297:18309 SetMonadExamples3 binary_search
R18316:18319 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18315:18315 Coq.Numbers.BinNums <> Z ind
binder 18312:18312 <> P:183
R18334:18334 Coq.Numbers.BinNums <> Z ind
binder 18327:18328 <> lo:184
binder 18330:18331 <> hi:185
R18340:18349 PL.Monad SetMonad M def
R18351:18351 Coq.Numbers.BinNums <> Z ind
R18358:18369 PL.Monad SetMonadOperator1 repeat_break def
R18394:18394 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18397:18398 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18401:18401 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18395:18396 PL.Monad <> lo:184 var
R18399:18400 PL.Monad <> hi:185 var
R18372:18389 PL.Monad SetMonadExamples3 body_binary_search def
R18391:18391 PL.Monad <> P:183 var
prf 18413:18448 SetMonadExamples3 functional_correctness_binary_search
R18465:18468 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18464:18464 Coq.Numbers.BinNums <> Z ind
binder 18461:18461 <> P:186
binder 18475:18476 <> lo:187
binder 18478:18479 <> hi:188
R18486:18486 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18519:18527 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 18494:18494 <> n:189
binder 18496:18496 <> m:190
R18505:18508 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18500:18503 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R18499:18499 PL.Monad <> n:189 var
R18504:18504 PL.Monad <> m:190 var
R18512:18515 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18509:18509 PL.Monad <> P:186 var
R18511:18511 PL.Monad <> m:190 var
R18516:18516 PL.Monad <> P:186 var
R18518:18518 PL.Monad <> n:189 var
R18532:18539 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18528:18528 PL.Monad <> P:186 var
R18530:18531 PL.Monad <> lo:187 var
R18546:18553 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18540:18541 Coq.Init.Logic <> ::type_scope:'~'_x not
R18542:18542 PL.Monad <> P:186 var
R18544:18545 PL.Monad <> hi:188 var
R18554:18558 PL.Monad SetMonadHoare Hoare def
binder 18599:18599 <> x:191
R18607:18610 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R18604:18604 PL.Monad <> P:186 var
R18606:18606 PL.Monad <> x:191 var
R18611:18612 Coq.Init.Logic <> ::type_scope:'~'_x not
R18613:18613 PL.Monad <> P:186 var
R18617:18619 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R18616:18616 PL.Monad <> x:191 var
R18561:18573 PL.Monad SetMonadExamples3 binary_search def
R18575:18575 PL.Monad <> P:186 var
R18577:18578 PL.Monad <> lo:187 var
R18580:18581 PL.Monad <> hi:188 var
R18651:18668 PL.Monad SetMonadHoare Hoare_repeat_break thm
R18689:18689 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18692:18693 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18696:18696 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 18694:18695 <> hi:192
binder 18690:18691 <> lo:193
binder 18689:18696 <> pat:194
R18705:18708 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R18703:18704 PL.Monad <> lo:193 var
R18709:18710 Coq.Init.Logic <> ::type_scope:'~'_x not
R18713:18714 PL.Monad <> hi:192 var
R18651:18668 PL.Monad SetMonadHoare Hoare_repeat_break thm
R18689:18689 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18692:18693 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18696:18696 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
binder 18694:18695 <> hi:195
binder 18690:18691 <> lo:196
binder 18689:18696 <> pat:197
R18705:18708 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R18703:18704 PL.Monad <> lo:196 var
R18709:18710 Coq.Init.Logic <> ::type_scope:'~'_x not
R18713:18714 PL.Monad <> hi:195 var
R18784:18801 PL.Monad SetMonadExamples3 body_binary_search def
R18812:18823 PL.Monad SetMonadHoare Hoare_choice thm
R18812:18823 PL.Monad SetMonadHoare Hoare_choice thm
R18836:18850 PL.Monad SetMonadHoare Hoare_test_bind thm
R18836:18850 PL.Monad SetMonadHoare Hoare_test_bind thm
R18875:18883 PL.Monad SetMonadHoare Hoare_ret thm
R18875:18883 PL.Monad SetMonadHoare Hoare_ret thm
R18917:18931 PL.Monad SetMonadHoare Hoare_test_bind thm
R18917:18931 PL.Monad SetMonadHoare Hoare_test_bind thm
R18956:18967 PL.Monad SetMonadHoare Hoare_choice thm
R18976:18990 PL.Monad SetMonadHoare Hoare_test_bind thm
R18956:18967 PL.Monad SetMonadHoare Hoare_choice thm
R18976:18990 PL.Monad SetMonadHoare Hoare_test_bind thm
R18976:18990 PL.Monad SetMonadHoare Hoare_test_bind thm
R19013:19021 PL.Monad SetMonadHoare Hoare_ret thm
R19013:19021 PL.Monad SetMonadHoare Hoare_ret thm
R19049:19057 PL.Monad SetMonadHoare Hoare_ret thm
R19049:19057 PL.Monad SetMonadHoare Hoare_ret thm
R19083:19099 PL.Monad SetMonadExamples3 <> mod
